IA aplicada a la ciencia de datos: uso de la IA en la construcción de visualización de datos
01.Conociendo los datos
01 Presentación
¡Hola! En esta clase introductoria, Álvaro te da la bienvenida al curso sobre cómo aplicar la IA en la Ciencia de Datos para crear visualizaciones de datos impactantes.

Aquí están los puntos clave:

Enfoque en ChatGPT: Aprenderás a usar ChatGPT para generar gráficos de manera más eficiente, crear narrativas visuales sólidas y responder preguntas de negocio importantes.
Datos de Zoop: Trabajarás con datos de un comercio electrónico ficticio llamado Zoop.
Requisitos: Necesitas una cuenta de ChatGPT y conocimientos intermedios de Python, Pandas, Matplotlib y Seaborn.
Énfasis en la IA: El curso se centra en cómo la IA puede acelerar la creación de informes y mejorar los gráficos, no tanto en explicar el código en detalle.
Resultados Aleatorios: Ten en cuenta que las respuestas de la IA generativa son aleatorias, así que es posible que necesites ajustar el código.
¿Te gustaría que profundicemos en alguno de estos puntos?

Copiar texto de Luri al portapapeles
*******************************************************************************
02
Preparando el ambiente
 Siguiente pregunta

En este curso, vamos a trabajar con el storytelling de la empresa Zoop, una gran minorista que atiende a todas las regiones de Brasil a través de su comercio electrónico. Es conocida por su amplia variedad de productos, buscando atender a todo tipo de público.

Como analista de datos de Zoop, has recibido una solicitud del Director de Datos para extraer los datos de ventas y el perfil de los clientes, y generar visualizaciones que ayuden en la construcción de informes, de acuerdo con algunos lineamientos proporcionados por las partes interesadas. Esto implica realizar un rápido análisis del público que tenemos en la tienda virtual y del ingreso de la empresa.

En total, se te presentarán 7 preguntas para que puedas contribuir en la construcción del storytelling del informe de la empresa. Estas preguntas serán respondidas a través de visualizaciones que puedan ser presentadas a la dirección de la empresa, destacando los datos de facturación, el perfil del cliente y otros indicadores que puedan ayudar en la toma de decisiones para su tienda online.

En este proyecto, importaremos dos bases de datos:

Datos de clientes del comercio electrónico de Zoop, separados por el código identificador de la compra.
Datos de ventas del comercio electrónico de Zoop en 2023, separados por el código identificador de la compra.
Estos datos serán leídos a través de enlaces (URL) del repositorio del proyecto en GitHub.

Nuestro objetivo es optimizar, mediante el uso de la IA generativa de ChatGPT, el proceso de análisis exploratorio de datos (AED) y la creación de visualizaciones utilizando el lenguaje Python. Todo este proceso tiene en cuenta el corto plazo para las entregas y la calidad de los resultados.

Antes de empezar… Necesitarás descargar el cuaderno del curso y subirlo a tu Google Colab. Para usar este entorno, es necesario tener una cuenta de Gmail, ya que todo el cuaderno se almacenará en Google Drive.

¿Todo listo? ¡Empecemos con el trabajo práctico! ¡Buen estudio y adelante!

 Discutir en el Foro
********************************************************************************+
03
Obteniendo los datos
¡Hola! En esta clase, aprendimos cómo obtener los datos de clientes y ventas de Zoop Megastore desde URLs de GitHub y cómo crear dataframes utilizando la biblioteca pandas en Python. También aprendimos a importar la biblioteca warnings para evitar que aparezcan advertencias en la pantalla.

Además, exploramos las columnas de los dataframes de clientes y ventas, como ID_de_compra, ID_de_cliente, ciudad, estado, región, edad, sexo_biológico, si pertenece al programa de cashback o no, y la nota que este cliente ha atribuido a su experiencia de compras. También vimos las columnas de ventas, como fecha, horario, categoría, precio_unitario, cantidad, valor del envío y el método_pago.

¿Te gustaría que profundicemos en algún aspecto en particular o tienes alguna pregunta sobre lo que hemos cubierto hasta ahora?
*********************************************************************************
04
Entendiendo los datos
¡Hola! En esta clase, aprendimos cómo usar la IA para explorar y entender los datos de clientes y ventas de un e-commerce. Aquí tienes un resumen de los puntos clave:

Preparación del entorno: Importamos las bases de datos de clientes y ventas en formato de DataFrames de pandas.
Exploración de la base de clientes:
Utilizamos ChatGPT para generar código Python que nos ayude a conocer mejor el DataFrame clientes.
Aplicamos funciones como head(), info() y describe() para visualizar las primeras filas, obtener información general y estadísticas descriptivas.
Analizamos la distribución por sexo biológico y la participación en el programa de cashback.
Exploración de la base de ventas:
Repetimos el proceso con el DataFrame ventas, utilizando ChatGPT para generar el código.
Convertimos la columna de fecha de compra al tipo DateTime para facilitar la creación de gráficos.
Analizamos las estadísticas descriptivas de las ventas, como la cantidad promedio de ítems vendidos y la distribución de los precios unitarios.
En resumen, esta clase nos enseñó cómo utilizar la IA para realizar una exploración inicial de los datos, comprender su contenido y prepararlos para la creación de visualizaciones. ¡Espero que te sea útil! ¿Hay algo más en lo que te pueda ayudar?
//////////////////////////////////////////////////////////////////////////////////////
05
Generando un prompt para la exploración de datos
 Siguiente pregunta

Daniela es una analista de datos en Serenatto - Café & Bistrô, una franquicia de restaurantes populares que ofrece una amplia variedad de platos de la cocina francesa e italiana. Ha recibido una solicitud para analizar, en poco tiempo, los datos de las ventas diarias de la sucursal de San José. Podemos observar una parte de los datos en la tabla a continuación:

id	fecha	producto	valor	metodo_pago
0	01-01-2024	Agua Mineral	3.00	Tarjeta de Débito
1	01-01-2024	Salteña	5.00	Tarjeta de Débito
2	01-01-2024	Petit Gateau	7.00	Tarjeta de Crédito
3	01-01-2024	Jugo de Fresa	4.50	Efectivo
4	01-01-2024	Crostini	8.00	Efectivo
Ella pensó en elaborar un pequeño prompt que realizara las siguientes tareas: leer el archivo .xlsx con los datos pasándolos a un DataFrame, cambiar el formato de la fecha a uno que pudiera ser fácilmente utilizado en visualizaciones, explorar brevemente los datos y crear una nueva base manteniendo solo las columnas con las fechas y los valores de las ventas.

Considerando las etapas descritas anteriormente, ¿cuál de los prompts a continuación tiene mayor probabilidad de ser interpretado correctamente por ChatGPT, generando así los tratamientos deseados por Daniela?

Alternativa incorreta
Crea un código en Python que lea la base de datos ventas.xlsx pasándola al DataFrame “df”. Cambia el formato de la columna “fecha” a datetime, donde la fecha originalmente está en el formato “DD-MM-YYYY”. Explora brevemente los datos y mantén solo las columnas “fecha” y “valor” de “df”.


Alternativa incorreta
Crea un código que lea la base de datos pasándola al DataFrame “df”. Cambia el formato de la columna “fecha” a datetime, donde la fecha originalmente está en el formato “DD-MM-YYYY”. Explora brevemente los datos y crea un DataFrame llamado “ventas” con solo las columnas “fecha” y “valor” de “df”.


Alternativa incorreta
Crea un código en Python que lea la base de datos ventas.xlsx pasándola al DataFrame “df”. Cambia el formato de la columna “fecha” a datetime, donde la fecha originalmente está en el formato “YYYY-MM-DD”. Explora brevemente los datos y crea un DataFrame llamado “ventas” con solo las columnas “fecha” y “valor” de “df”.


Alternativa incorreta
Crea un código en Python que lea la base de datos ventas.xlsx pasándola al DataFrame “df”. Cambia el formato de la columna “fecha” a datetime, donde la fecha originalmente está en el formato “DD-MM-YYYY”. Explora brevemente los datos y crea un DataFrame llamado “ventas” con solo las columnas “fecha” y “valor” de “df”.


Este es el prompt ideal, ya que especifica todos los procesos necesarios para lograr el comportamiento deseado, generando un nuevo DataFrame con los datos resumidos.
************************************************************************************************
06
Para saber más: como crear un buen prompt con chat gpt
 Siguiente pregunta

Una de las habilidades más importantes para la interacción con IAs generativas como ChatGPT es la capacidad de crear buenos prompts, guiando la herramienta de acuerdo con tu conocimiento sobre el negocio. La creación de un prompt eficaz en ChatGPT es fundamental para obtener resultados precisos y relevantes para la resolución de problemas.

En el contexto de un proyecto de análisis de datos, como el que estamos trabajando aquí, un prompt bien elaborado puede ser la clave para obtener insights valiosos. A continuación, se presentan algunas buenas prácticas y ejemplos, teniendo en cuenta un proyecto simple de Ciencia de Datos:

Sé específico y directo:

Explica directamente lo que deseas que ChatGPT ejecute. Esto ayuda a la IA a entender mejor tu necesidad, proporcionando respuestas más precisas.

Ejemplo: “Realiza un análisis exploratorio de datos en la base ‘zoop_ventas.csv' usando las bibliotecas de manipulación de datos de Python. Presenta un resumen estadístico de las ventas por región”.

Proporciona contexto cuando sea necesario:

Informa a ChatGPT del contexto del proyecto, incluyendo datos, objetivos y restricciones. Esto puede mejorar significativamente la calidad de las respuestas. Sin embargo, evita información innecesaria que pueda confundir a la IA.

Ejemplo: "Estoy trabajando en un proyecto de análisis de ventas de una tienda minorista. La base de datos contiene información de ventas diarias por categoría de producto y región en 2023. Ayúdame a calcular la suma de las ventas de 'Electrónicos' por trimestre".

Especifica el formato de la respuesta:

Indica el formato deseado para la respuesta, como gráficos, tablas o explicaciones detalladas.

Ejemplo: "Crea un gráfico de líneas que muestre la evolución de las ventas a lo largo del último año, segmentado por categoría de productos".

Indica el nivel de detalle deseado:

Deja claro el nivel de detalle o profundidad de la explicación que estás buscando. Esto ayuda a la IA a ajustar la respuesta a tu necesidad de comprensión.

Ejemplo: "¿Podrías proporcionarme un ejemplo comentado de cómo usar la función groupby() de pandas para agrupar datos por categoría y calcular la suma total de ventas para cada grupo?"

Usa términos técnicos correctos:

Pon atención a la terminología específica relacionada con tu área de interés. Esto asegura que la IA comprenda el dominio de tu pregunta y responda de forma adecuada.

Ejemplo: “¿Cómo implemento un modelo de regresión lineal en Python usando scikit-learn para predecir ventas futuras con base en gastos de publicidad?”

Divide tareas complejas en etapas simples:

Si el proyecto involucra varias etapas, divídelo en partes más pequeñas e instruye a ChatGPT paso a paso. Esto facilita que la IA te ayude de manera eficaz.

Ejemplo:

"¿Cómo puedo manejar valores faltantes en mi conjunto de datos usando pandas?"

"¿Cuál es la mejor manera de visualizar la distribución de edades en mi conjunto de datos usando matplotlib?"

“¿Podrías ajustar el visual de la distribución de edades colocando las etiquetas y labels con tamaño 12 y color #CCCCCC?”

Mantente abierto a interacciones:

Esté siempre preparado(a) para realizar ajustes en tus prompts basados en las respuestas recibidas. La interacción puede ayudar a refinar las respuestas y obtener exactamente lo que necesitas.

Ejemplo: “Esta respuesta puede mejorar. ¿Qué tal si redondeamos los valores a dos decimales y mostramos en el gráfico solo los valores mayores a 1 millón (1e6)?”

Estos consejos son fundamentales en la construcción de prompts bien instruidos, como los que encontrarás a lo largo de este curso. Observa cómo se describen los pasos y acciones en los prompts del curso y cómo puedes aplicarlos en tu proyecto utilizando ChatGPT.

Asegúrate de comunicar tus intenciones de forma precisa, dividir tareas complejas en etapas manejables y proporcionar ejemplos cuando sea apropiado. Esto te ayudará a obtener respuestas más relevantes y útiles para tu proyecto, haciendo la interacción con el chat más eficaz.
************************************************************************
07
Tipos de gráficos
¡Hola! En esta clase, aprendiste cómo consolidar datos de diferentes fuentes en una única tabla utilizando la columna ID_compra como clave. También aprendiste a organizar las columnas en una secuencia específica y a utilizar ChatGPT para generar sugerencias de visualizaciones basadas en los datos consolidados.

Además, se discutieron diferentes tipos de visualizaciones que se pueden crear, como gráficos de líneas de la facturación mensual, gráficos de barras por categoría, mapas de calor de días y horas de mayor facturación, histogramas de edades, gráficos circulares o de barras del sexo biológico y gráficos de barras por región. Estas visualizaciones pueden ayudar a entender mejor el comportamiento de los clientes y las tendencias de ventas, lo que puede ser clave para tomar decisiones estratégicas.

¿Te gustaría que profundicemos en algún tema en particular o tienes alguna pregunta sobre lo que hemos visto hasta ahora?
///////////////////////////////////////////////////////////////////////////////////////////////////
08
Ajustando el prompt
 Siguiente pregunta

Juan está aprendiendo cómo utilizar ChatGPT en un proyecto de análisis de datos que pretende agregar a su portafolio. Durante su investigación, encontró dos bases que contenían datos sobre el PIB y los Valores Agregados de Bienes y Servicios.

La primera base (pib_estados) tiene el siguiente formato en sus primeras 10 líneas:

año	estado	region	pib	impuesto_liquido	va
0	2002	AC	Norte	2971301277	228471013
1	2002	AL	Noreste	11536852891	937933640
2	2002	AM	Norte	22093338008	3876992799
3	2002	AP	Norte	3173342678	199411105
4	2002	BA	Noreste	58842975944	8368251983
5	2002	CE	Noreste	28718840361	3677581705
6	2002	DF	Centro-Oeste	53902199799	6926279208
7	2002	ES	Sureste	27048996552	4743779770
8	2002	GO	Centro-Oeste	38629364574	4484244717
9	2002	MA	Noreste	15924002514	1357799240
La segunda base (va_estados) tiene el siguiente formato en sus primeras 10 líneas:

año	estado	va_agropecuaria	va_industria	va_servicios	va_adespss
0	2002	AC	284337190	355041179	1071069387	1032382508
1	2002	AL	2474313378	2168565501	3530694271	2425346094
2	2002	AM	1239199988	7770508485	5965772157	3240864579
3	2002	BA	6612124525	11847928358	22322715730	9691955360
5	2002	CE	1885081291	5671628251	11594124567	5890424538
6	2002	DF	165416683	4089946543	21927573402	20792983964
7	2002	ES	784413923	8164182067	9766872482	3589748305
8	2002	GO	5051406044	8737191313	14922918441	5433604075
9	2002	MA	1867205923	2732201913	6537050283	3429745159
Juan desea concatenar las bases en una sola, manteniendo solo las columnas con el año, el estado, la región, el PIB, los impuestos líquidos, el valor agregado y el valor agregado de la agropecuaria. Así, Juan creó el siguiente prompt:
Crea un código que concatene las bases “pib_estados” y “va_estados” en una única tabla por año y estado, manteniendo las columnas con el año, el estado, la región, el PIB, los impuestos líquidos, el valor agregado y el valor agregado de la agropecuaria.
Copia el código
Con base en este prompt y lo que hemos aprendido a lo largo de las clases, ¿qué podemos agregar para mejorarlo? Elige las alternativas correctas.

Alternativa correta
Hablar sobre los tipos de datos presentes en las tablas, si son números, cadenas o booleanos.


Alternativa correta
Especificar detalles, como el nombre correcto de las columnas para que el código sea más preciso y requiera menos modificaciones.


Dejar claro el nombre de las columnas puede ayudar a crear un código menos genérico y más específico para el problema que deseas resolver.

Alternativa correta
Definir cuál será el lenguaje de programación que utilizará ChatGPT para crear el código deseado.


Dejar clara la elección del lenguaje de programación es extremadamente importante para guiar a la IA en la resolución del problema, de acuerdo con los paquetes específicos del lenguaje que estés utilizando.

Alternativa correta
Especificar la cantidad de columnas y registros para ajustar ChatGPT a la parte de los datos que se utilizarán.
*****************************************************************************+
09
Para saber más: sintetizando el contenido
 Siguiente pregunta

En este curso, vamos a aprender a utilizar la IA de ChatGPT para la creación y refinamiento de los visuales de acuerdo con premisas que responden a las preguntas planteadas por las partes interesadas.

Antes de avanzar a la próxima clase, es importante que conozcamos todos los datos con los que estamos trabajando, entendiendo qué representa cada columna y cómo puede ser importante en la construcción de la narrativa de ventas y perfiles de los clientes de Zoop.

Para ello, nosotros, como analistas de datos de Zoop, generamos una única tabla con los datos necesarios para el análisis. Estos datos son de extrema importancia para la continuación de nuestro proyecto y, por lo tanto, necesitamos comprender la información a la que tenemos acceso. Así que, vamos a revisar los datos que tenemos en cada columna de la tabla df generada en el video anterior.

Las columnas de "df" son:

ID_compra: número único asignado a la compra realizada, en formato int
fecha: fecha de la compra, en formato datetime
horario: hora de la compra, en formato object
categoria: categoría del producto, en formato object
precio_unitario: precio de una unidad del producto, en formato float
cantidad: cantidad vendida del producto, en formato int
envio: costo de envío a ser pagado en total de la compra, en formato float
metodo_pago: método de pago de la compra, en formato object
ID_cliente: número único asignado al cliente, en formato int
edad: edad del cliente, en formato int
sexo_biologico: sexo biológico del cliente, en formato object
ciudad: ciudad del cliente, en formato object
estado: estado del cliente, en formato object
region: región del cliente, en formato object
cashback: si el cliente participa o no en el programa de cashback de la tienda, en formato object
nota: evaluación del cliente por la compra, en formato int
Las preguntas que vamos a responder a lo largo del curso se presentarán en la próxima clase, junto con el proceso que realizaremos desde la generación hasta el refinamiento del gráfico antes de la exportación de las imágenes.

Entonces, ¿comenzamos a crear nuestros visuales? ¡Te espero en la próxima clase!
**********************************************************************************************+
10
Desafío: Zoop Pay
 Siguiente pregunta

Has recibido una nueva solicitud de las partes interesadas de Zoop, en la que será necesario agregar más columnas de otra base de datos a la tabla consolidada en el video anterior.

A diferencia de las actividades que estamos realizando en los videos de este curso, aquí también utilizaremos esta nueva base para la construcción de los visuales dentro de los ejercicios de "Manos a la obra", enfocándonos en las demandas presentadas en las instrucciones de los ejercicios.

Los archivos que vamos a utilizar en esta parte del proyecto son:

Datos de clientes del e-commerce de Zoop, separados por el código identificador de la compra.
Datos de ventas del e-commerce de Zoop en 2023, separados por el código identificador de la compra.
Datos de clientes pre-registrados en Zoop Pay, la billetera digital de Zoop que está en proceso de implementación.
Estos datos se leerán a través de enlaces (URL) que compartimos a continuación:

url_clientes = "https://gist.githubusercontent.com/ahcamachod/d08898e1cc84c7271856e78d9558ca3d/raw/2f7e1fa53711efe6433a5c5ec79948f600591cb9/clientes_zoop.csv"
url_ventas = "https://gist.githubusercontent.com/ahcamachod/966d7162a3c3a2769b8770b35abf1bcc/raw/d79941b3fa46a450f3611589abd8663399c1277b/ventas_zoop.csv"
url_zoop_pay = "https://gist.githubusercontent.com/ahcamachod/ce728231a836a973c0df94a9f03ed871/raw/8db6da43d7cd94fcab937208067d0fceb521b78c/zoop_pay.csv"
Copia el código
Ahora que ya sabemos cuáles son los datos necesarios para la realización del proyecto, vamos a abrir el notebook mencionado anteriormente y realizar la siguiente actividad:

Construye y ejecuta un prompt en ChatGPT solicitando que lea las tres bases de datos y cree una única tabla concatenándolas. Recuerda ser bastante específico en cuanto al orden de las columnas y cuáles serán necesarias para realizar la concatenación de los datos, además de tratar la columna de fecha para el formato adecuado.

Consejo 1: Para facilitar el proceso, pide a ChatGPT que primero concatene los datos de clientes y ventas en una tabla llamada df y, finalmente, que concatene esta nueva tabla con la base de clientes pre-registrados en Zoop Pay, generando así la tabla consolidada con todos los datos. Este proceso puede realizarse paso a paso en dos prompts, por ejemplo.

Si necesitas ayuda, una opción de solución de la actividad estará disponible en la sección "Opinión del instructor".

Ver opinión del instructor
Opinión del instructor

Existen diversas formas de solucionar esta actividad. Presentamos a continuación una sugerencia de solución para cada problema.

Es importante destacar que, incluso utilizando los prompts sugeridos, el resultado puede variar un poco debido a la aleatoriedad de las IAs generativas cuando utilices tu propia cuenta.

Podemos utilizar el siguiente prompt para la resolución de la concatenación inicial entre la base de ventas y clientes:

Vamos a actuar como analistas de datos de un e-commerce. Recibimos tres bases de datos con la información de los clientes y ventas en 2023 y qué clientes están pre-registrados en Zoop Pay, respectivamente.

Vamos a comenzar uniendo las dos primeras bases de nuestro proyecto ("ventas" y "clientes") en un DataFrame llamado "df" utilizando como clave la columna "ID_compra". Además, vamos a organizar las columnas en la siguiente secuencia:

["ID_compra", "fecha", "hora", "categoría", "precio_unitario", "cantidad", "envio", "metodo_pago", "ID_cliente", "edad", "sexo_biologico", "ciudad", "estado", "region", "cashback", "nota"]
Copia el código
Construye un código para ejecutar esta etapa usando Python y la biblioteca Pandas.

Utilizando la respuesta de ChatGPT, obtenemos el siguiente código:

import pandas as pd

# Ejemplo de cómo cargar los DataFrames, si es necesario:
# ventas = pd.read_csv('ruta_al_archivo_de_ventas.csv')
# clientes = pd.read_csv('ruta_al_archivo_de_clientes.csv')

# Uniendo las bases "ventas" y "clientes" usando la columna "ID_compra" como clave
df = pd.merge(ventas, clientes, on="ID_compra")

# Organizando las columnas en la secuencia especificada
columnas_ordenadas = ["ID_compra", "fecha", "hora", "categoría", "precio_unitario", "cantidad", "envio", "metodo_pago", "ID_cliente", "edad", "sexo_biologico", "ciudad", "estado", "region", "cashback", "nota"]

df = df[columnas_ordenadas]

# Mostrando las primeras filas del DataFrame resultante para verificación
df.head()
Copia el código
Nota que en este código generado por ChatGPT necesitamos ajustar la parte que lee los datos de las bases, pasando los enlaces como creados al inicio del cuaderno de Desafíos.

Ahora, vamos a la segunda parte del problema, concatenando este DataFrame creado con la base Zoop Pay y ajustando la columna de fecha a formato datetime. Por lo tanto, podemos utilizar el siguiente prompt para la resolución de estos procesos:

Ahora, vamos a unir el "df" con la base "zoop_pay", leída a partir de la URL "url_zoop_pay", generando un nuevo "df". Para unir las bases, utilizaremos la columna "ID_cliente". Además, ajustaremos la columna "fecha" al formato datetime, donde su formato en la base de datos es "YYYY-MM-DD".

Utilizando la respuesta de ChatGPT, obtenemos el siguiente código:

import pandas as pd

# Sustituye url_zoop_pay por la URL real proporcionada para la base zoop_pay
zoop_pay = pd.read_csv(url_zoop_pay)

# Uniendo el DataFrame df con la base zoop_pay utilizando la columna "ID_cliente"
df = pd.merge(df, zoop_pay, on="ID_cliente")

# Ajustando la columna "fecha" al formato datetime
df['fecha'] = pd.to_datetime(df['fecha'], format='%Y-%m-%d')

# Mostrando las primeras filas del DataFrame resultante para verificación
df.head()
Copia el código
Ahora, veamos el resultado generado por medio del código proporcionado por ChatGPT:

index	ID_compra	fecha	categoria	precio_unitario	cantidad	envio	metodo_pago	ID_cliente	edad	sexo_biologico	ciudad	estado	region	cashback	nota	zoop_pay
0	6	2023-01-03 00:00:00	Electrónicos	4457.9	4	713.26	Paypal	6149	30	Masculino	Hermosillo	Sonora	Noroeste	Sí	10	No
1	2467	2023-08-02 00:00:00	Alimentos y bebidas	13.9	1	0.97	Transferencia	6149	30	Masculino	Hermosillo	Sonora	Noroeste	Sí	8	No
2	5	2023-01-03 00:00:00	Herramientas y construcción	115.9	1	0.0	Transferencia	9491	36	Masculino	Ciudad de México	Ciudad de México	Centro	Sí	8	Sí
3	9	2023-01-03 00:00:00	Belleza e higiene	68.9	2	13.78	Tarjeta de Crédito	5288	39	Femenino	Aguascalientes	Aguascalientes	Centro-Norte	No	7	No
4	4	2023-01-03 00:00:00	Herramientas y construcción	80.9	5	40.45	Transferencia	9679	35	Masculino	Veracruz	Veracruz	Golfo	Sí	9	Sí
La práctica siempre es muy importante para fijar el contenido. Utilizar IAs para ayudar en el análisis de datos es una gran herramienta para optimizar el tiempo en la construcción del código y también puede generar ideas que contribuyan mucho en tu proceso de análisis exploratorio de datos. Pero recuerda, es muy importante que analices las respuestas generadas por las IAs para investigar si lo que se ha presentado tiene sentido y si realmente resuelve el problema que estás enfrentando.

Compartir tus conocimientos y las prácticas que has estado desarrollando en este punto es clave para tu crecimiento dentro de la carrera de datos. Por lo tanto, busca realizar los ejercicios propuestos y observa cómo esto puede ayudarte a progresar en tus habilidades de análisis de datos con IAs.

Si tienes alguna duda, puedes usar el foro o el Discord de Alura.

******************************************************************************************
11
Lo que aprendimos
 Siguiente pregunta

Lo que aprendimos en esta aula:

Comprender el problema del negocio y la demanda para la extracción de datos.
Explorar las bases de datos del proyecto y buscar insights para la creación de visuales.
Definir qué tareas solicitaremos con el apoyo de la IA de ChatGPT.
Crear un buen prompt para ChatGPT.
Pedir sugerencias más precisas de visuales a ChatGPT.
Con la asistencia de ChatGPT, logramos:

Explorar brevemente los datos de ventas y el perfil del cliente de Zoop.
Unir las bases y organizarlas para generar una tabla consolidada para los análisis.
Investigar los posibles visuales que podemos crear para la narrativa del informe de Zoop.
**************************************************************************
**********************************************************************+**
02.Visualización de datos
01
Proyecto del aula anterior
 Siguiente pregunta

¿Comenzando en esta etapa? Aquí puedes descargar los archivos del proyecto que hemos avanzado hasta el aula anterior.

Descargue los archivos en Github o haga clic aquí para descargarlos directamente.
************************************************************************************
02
Definiendo las visualizaciones
¡Hola! En esta clase, aprendimos cómo utilizar ChatGPT para generar visualizaciones de datos basadas en preguntas de negocio específicas. Aquí tienes un resumen de los puntos clave:

Preguntas de Negocio: Definimos preguntas de negocio claras para guiar la creación de visualizaciones relevantes. Por ejemplo, para el equipo de ventas, preguntas como "¿Cuáles fueron los métodos de pago más utilizados en 2023?" son cruciales.
Exploración de Datos con ChatGPT: Utilizamos ChatGPT para obtener ideas iniciales de visualizaciones, aunque se enfatizó que las sugerencias pueden variar debido a la aleatoriedad de la IA.
Creación de Tablas Resumidas: Aprendimos a crear tablas resumidas utilizando value_counts() y reset_index() para preparar los datos para la visualización.
Generación de Gráficos con Seaborn: Utilizamos la biblioteca seaborn para crear un gráfico de barras que muestra la cantidad de cada método de pago utilizado. Ajustamos el tamaño del gráfico, los títulos y las etiquetas para que la visualización sea clara y efectiva.
Importancia de la Identidad Visual: Se mencionó que, aunque ChatGPT genera visualizaciones útiles, es importante ajustarlas para que coincidan con la identidad visual de la empresa.
En resumen, esta clase nos proporcionó una base sólida para utilizar la IA en la creación de visualizaciones de datos, desde la definición de preguntas de negocio hasta la generación de gráficos informativos. ¿Hay algo en particular sobre lo que te gustaría profundizar o tienes alguna otra pregunta?
******************************************************************************
03
Para saber más: premisas de las partes interesadas - Liderazgo y colaboradores
 Siguiente pregunta

En el vídeo anterior, construimos la versión inicial de nuestra primera visualización para el storytelling de Zoop. Antes de continuar con las próximas visualizaciones, es importante definir el proceso que seguiremos para garantizar el mejor resultado en la creación de los mismos para los informes de la empresa.

Inicialmente, construiremos la primera versión de todos los visuales respondiendo a las preguntas planteadas por las partes interesadas. Esta etapa se llevará a cabo en esta y en la próxima clase de este curso. En una segunda fase, realizaremos el refinamiento de algunos de los visuales aprendiendo las principales técnicas de storytelling y ajuste de visuales con las bibliotecas de visualización de Python. Finalmente, ampliaremos el refinamiento al resto de los visuales, exportándolos como imágenes para su uso en informes.

Importante: En la generación de la primera versión de los visuales, los códigos y visuales generados en tu proyecto pueden variar en relación a los de las clases, debido a la aleatoriedad de la IA generativa elegida. Sin embargo, en esta etapa, lo importante es la construcción de la primera versión de los visuales.

Las preguntas que responderemos durante la elaboración de los visuales para el storytelling de Zoop con el soporte de la IA de ChatGPT son las siguientes:

Ventas

¿Cuáles fueron los métodos de pago más utilizados en 2023?
¿Cuál fue la facturación por categoría en 2023?
¿Cómo fueron las ventas a lo largo de los meses en 2023?
¿Cómo se divide la venta por trimestre según el método de pago? ¿Existe un período en el que algún tipo de pago sobresale?
Perfil del cliente

¿Cuál es la proporción de clientes que participan en nuestro programa de cashback?
¿Cómo están distribuidas las evaluaciones de producto? ¿Tenemos buenos números generales?
¿Cómo está distribuido nuestro público por edad y sexo biológico? ¿Existe un grupo que sobresale?
Cada pregunta será explorada utilizando un tipo de visualización junto con elementos visuales para enfocar la atención de nuestro público en lo que queremos informar y destacar en nuestros datos.

¡Cuento contigo en este camino! ¡Felices estudios y hasta el próximo vídeo!
**********************************************************************************
04
Comparando los datos
¡Hola! En esta clase, aprendiste a usar ChatGPT para crear visualizaciones de datos a partir de un dataframe. Se abordaron los siguientes puntos:

Gráfico de barras horizontales: Se generó un gráfico de barras horizontales para visualizar la facturación por categoría de productos. Se explicó cómo calcular la facturación y cómo usar las bibliotecas de visualización de datos de Python para crear el gráfico.
Gráfico de líneas: Se creó un gráfico de líneas para mostrar las ventas totales mensuales a lo largo del año 2023. Se explicó cómo agrupar los datos por mes, cómo traducir los nombres de los meses y cómo utilizar el gráfico de líneas para visualizar series temporales.
¿Te gustaría que repasemos algún punto en particular o que te proporcione ejemplos adicionales?
////////////////////////////////////////////////////////////////////////////////////////////////
 05 Buenas prácticas en la redacción del prompt
 Siguiente pregunta

Para aprovechar los beneficios de la IA generativa de ChatGPT en la exploración de datos, es muy importante entender cómo crear prompts efectivos que logren los resultados deseados, basándonos en nuestro conocimiento del negocio.

Siguiendo lo que hemos aprendido hasta ahora, ¿cuáles de las opciones a continuación representan buenas prácticas para la redacción de prompts para la generación de visualizaciones de datos en Python?

Alternativa correta
Incluir información sobre la estructura de los datos y qué variables deseas visualizar.


Esta es una buena práctica en la redacción de un prompt, ya que incluir detalles sobre la estructura de los datos y qué variables deseas visualizar es esencial para crear visualizaciones de datos que destaquen las relaciones y patrones deseados para el usuario.

Alternativa correta
Especificar la biblioteca de visualización de datos que deseas usar (como matplotlib, seaborn o plotly).


Esta es una buena práctica en la redacción de un prompt, ya que diferentes bibliotecas tienen capacidades y sintaxis variadas. Esta descripción orienta a la IA en la generación de la respuesta para la sintaxis y las funcionalidades específicas de estas herramientas, asegurando que las instrucciones y el código generado sean compatibles con las preferencias del usuario y los requisitos técnicos del proyecto.

Alternativa correta
Describir las variables a utilizar sin mencionar el tipo de visualización deseado.


Alternativa correta
Dejar la elección de la paleta de colores y el estilo del gráfico a criterio de la IA, sin proporcionar preferencias.

************************************************************************************
 06 Composición de datos dinámicos
¡Hola! En esta clase, aprendiste sobre gráficos de composición, enfocándote en datos dinámicos que cambian con el tiempo. El objetivo principal fue visualizar cómo se dividen las ventas por trimestre según el método de pago.

Aquí tienes un resumen de los puntos clave:

Gráficos de Composición: Son útiles para entender cómo se componen tus datos, especialmente cuando cambian con el tiempo.
Datos Dinámicos: Se refieren a datos que varían a lo largo del tiempo, como las ventas trimestrales.
Uso de Pandas y Matplotlib: Se utilizan estas bibliotecas de Python para crear visualizaciones de datos.
Unstack(): Este método es útil para organizar los datos en una tabla que facilita la visualización, mostrando los trimestres como índices y los métodos de pago como columnas.
Gráfico de Barras Apiladas: Permite comparar cómo se comporta cada variable (método de pago) en diferentes períodos (trimestres).
¿Te gustaría que profundizáramos en alguno de estos puntos o tienes alguna pregunta específica?
/////////////////////////////////////////////////////////////////////////////////////////////////
Resp chatGPT:
import pandas as pd

# Cargar el archivo CSV
df = pd.read_csv('panini.csv')

# Asegurar que la columna 'fecha' esté en formato datetime
df['fecha'] = pd.to_datetime(df['fecha'])

# Filtrar por producto "Panini"
df_panini = df[df['producto'] == 'Panini']


# Agrupar por mes y sumar los valores de ventas
ventas_mensuales = df_panini.resample('M', on='fecha')['valor'].sum()

-------------------------------------------------------------------
import matplotlib.pyplot as plt
import seaborn as sns

# Crear gráfico de línea
plt.figure(figsize=(10, 5))
sns.lineplot(
    x=ventas_mensuales.index.strftime('%B %Y'),  # Nombres de los meses con año
    y=ventas_mensuales.values,
    marker='o'
)

plt.title('Ventas Mensuales de Panini')
plt.xlabel('Mes')
plt.ylabel('Ventas ($)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.grid(True)
plt.show()

/////////////////////////////////////////////////////////////////////////////
07 Respuesta del prompt
 Siguiente pregunta

Volvemos a una de las demandas de Daniela, analista de datos en Serenatto - Café & Bistrô.

En esta nueva solicitud, ella necesita analizar las ventas de "Panini" en el último semestre de 2023 en la sucursal de San José. Se sospecha que las ventas de este producto están bajando cada vez más y, por lo tanto, se solicitó el análisis.

Podemos observar cómo está la estructura de los datos en la tabla a continuación:

id	fecha	producto	valor	metodo_pago
0	2720	2023-07-01	Risoto de Funghi	13.0	Tarjeta de Débito
1	2721	2023-07-02	Tiramisú	10.0	Tarjeta de Débito
2	2722	2023-07-02	Tiramisú	10.0	Tarjeta de Crédito
3	2723	2023-07-02	Ratatouille	8.5	Transferencia
4	2724	2023-07-03	Ratatouille	8.5	Efectivo
La tabla contiene los datos de ventas de los productos de Serenatto en el último semestre de 2023 de esta sucursal y se puede acceder en el archivo panini.csv. Para analizar los datos, Daniela creó el siguiente prompt para generar una visualización de las ventas de este producto con el soporte de ChatGPT:

"""Tenemos un DataFrame llamado "df" y queremos construir un gráfico de línea que muestre las ventas de "Panini" por mes. Utiliza solo las columnas de "df":

fecha: con la fecha de las ventas ya en formato datetime (aaaa-mm-dd)

valor: con el valor de cada venta.

producto: con los productos vendidos. Vamos a utilizar el producto "Panini".

Agrupa las fechas de la columna "fecha" por mes y agrega los datos solo por la suma de las ventas. Por último, cambia el eje de las fechas para mostrar los meses escritos.

Utiliza las bibliotecas de visualización de datos de Python para crear esta visualización."""

Considerando este prompt escrito para ChatGPT, ¿cuál de los códigos a continuación es una posible respuesta de ChatGPT?

Alternativa incorreta
import matplotlib.pyplot as plt

df_panini = df[df['producto'] == 'Panini']
df_panini['fecha'] = pd.to_datetime(df_panini['fecha'], format='%Y-%m-%d')
ventas_por_mes = df_panini.groupby(df_panini['fecha'].dt.to_period('M'))['valor'].sum()
plt.figure(figsize=(10, 6))
plt.plot(ventas_por_mes.index.to_timestamp(), ventas_por_mes, marker='o', linestyle='-')
plt.title('Ventas mensuales de Panini')
plt.xlabel('Mes')
plt.ylabel('Total de ventas')
plt.xticks(ventas_por_mes.index.to_timestamp(), [x.strftime('%b %Y') for x in ventas_por_mes.index.to_timestamp()], rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

Este es el código correcto y posible de ser descrito por ChatGPT, ya que genera una visualización de gráfico de línea con los datos de las ventas de Panini en el último semestre de 2023. La gráfica generada es la siguiente:

1.jpg

Alternativa incorreta
import matplotlib.pyplot as plt

ventas_por_mes = df.groupby(df['fecha'].dt.to_period('M'))['valor'].sum()
plt.figure(figsize=(10, 6))
plt.barh(ventas_por_mes, width = ventas_por_mes.index.to_timestamp())
plt.title('Ventas mensuales de Panini')
plt.xlabel('Mes')
plt.ylabel('Total de ventas')
plt.yticks(ventas_por_mes.index.to_timestamp(), [y.strftime('%b %Y') for y in ventas_por_mes.index.to_timestamp()], rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

Alternativa incorreta
import matplotlib.pyplot as plt

df_panini = df[df['producto'] == 'Panini']
ventas_por_mes = df_panini.groupby(df_panini['fecha'].dt.to_period('M'))['valor'].sum()

plt.figure(figsize=(10, 6))
plt.bar(ventas_por_mes.index.to_timestamp(), ventas_por_mes, width=10)
plt.title('Ventas mensuales de Panini')
plt.xlabel('Mes')
plt.ylabel('Total de ventas')
plt.xticks(ventas_por_mes.index.to_timestamp(), [x.strftime('%b %Y') for x in ventas_por_mes.index.to_timestamp()], rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

Alternativa incorreta
import matplotlib.pyplot as plt

ventas_por_mes = df.groupby(df['fecha'].dt.to_period('M'))['valor'].sum()
plt.figure(figsize=(10, 6))
plt.plot(ventas_por_mes.index.to_timestamp(), ventas_por_mes, marker='o', linestyle='-')
plt.title('Ventas mensuales de Panini')
plt.xlabel('Mes')
plt.ylabel('Total de ventas')
plt.xticks(ventas_por_mes.index.to_timestamp(), [x.strftime('%b %Y') for x in ventas_por_mes.index.to_timestamp()], rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

¡Enhorabuena, has acertado!
*************************************************************************************
08 Haga lo que hicimos
 Siguiente pregunta

Gráfico de columnas apiladas

Aprendimos en el video anterior a construir un gráfico de columnas apiladas para la composición de datos con el apoyo del ChatGPT. ¿Qué te parece si aprendemos también otro tipo de visualización que combine la composición y comparación de datos a través de un problema?

La directiva de Zoop está preocupada por las categorías con menor facturación anual en su e-commerce y, por eso, le gustaría entender el desempeño de esas categorías de manera aislada. Para esto, recibimos la demanda de explorar la facturación trimestral investigando cómo está el equilibrio de estas ventas por cada categoría.

Para resolver este problema, vamos a agrupar las 3 categorías con las menores facturaciones anuales, separándolas por trimestre mediante un gráfico de columnas agrupadas.

¿Por qué un gráfico de columnas agrupadas?

Un gráfico de columnas agrupadas es ideal para comparar categorías diferentes en relación con una variable (puede ser temporal o no), mostrando cómo los valores se comparan dentro de cada categoría en columnas separadas, facilitando la visualización de patrones y diferencias entre grupos.

A continuación, vamos a pedir ayuda al ChatGPT para construir esta visualización mediante el siguiente prompt:

Tenemos un DataFrame llamado "df" y queremos construir una visualización de un gráfico de columnas agrupadas lado a lado que presente las ventas por trimestre en relación con las categorías de los productos.

En "df", tenemos las columnas:

trimestre: con las fechas en trimestres de las compras
faturamento: con los valores de las ventas
categoria: con las categorías de los productos vendidos. Vamos a utilizar solo las categorías "Papelería y oficina", "Libros" y "Alimentos y bebidas".
Deseamos crear una visualización que presente las ventas por trimestre ("facturacion"), agrupando las categorías lado a lado en relación con el trimestre correspondiente a cada compra.

Utiliza las bibliotecas de visualización de datos de Python para crear esta visualización."""

El código generado por el prompt fue el siguiente:

import pandas as pd
import matplotlib.pyplot as plt

df['facturacion'] = (df['precio_unitario'] * df['cantidad']) + df['envio']
df['trimestre'] = df['fecha'].dt.to_period('Q')
# Suponiendo que ya tienes el DataFrame df
# Filtrar las categorías deseadas
categorias_deseadas = ["Papelería y oficina", "Libros", "Alimentos y bebidas"]
df_filtrado = df[df['categoria'].isin(categorias_deseadas)]
# Pivotar los datos para tener los trimestres como índice y las categorías como columnas
pivot_df = df_filtrado.pivot_table(index='trimestre', columns='categoria', values='facturacion', aggfunc='sum')
# Crear el gráfico de columnas agrupadas
pivot_df.plot(kind='bar', stacked=False, figsize=(10, 6))
# Agregar etiquetas y título
plt.xlabel('Trimestre')
plt.ylabel('Ventas')
plt.title('Ventas por Trimestre y Categoría')
plt.xticks(rotation=45)  # Rotar las etiquetas del eje x para mejorar la legibilidad
# Mostrar el gráfico
plt.legend(title='Categoría')
plt.tight_layout()
plt.show()
Copia el código
Y su gráfica fue:

2.png

Ver opinión del instructor
Opinión del instructor

Continúa con tus estudios, y si tienes alguna duda, ¡no dudes en utilizar nuestro foro!

*************************************************************************************
09 Desafío: generando visualizaciones con respecto a la localización
 Siguiente pregunta

¿Vamos a practicar lo que aprendimos a partir del DataFrame df que generamos en el ejercicio de Manos a la Obra anterior?

Has recibido una nueva demanda de Zoop para generar 2 nuevos visuales, uno relacionado con el perfil de las ventas y el otro con el perfil de los clientes de una región específica. Vamos a observar las dos situaciones y construir, con la ayuda de ChatGPT, los dos gráficos solicitados:

Desafío 1:

Construye y ejecuta un prompt en ChatGPT para generar, a partir de nuestra base de datos, un visual que muestre el facturación de las ventas por región. Recuerda que aquí la facturación se calcula multiplicando el valor unitario por la cantidad comprada y sumando el costo de envío.

Desafío 2:

Zoop quiere realizar una campaña en los estados de México y Puebla, por lo que necesita conocer el perfil de su público según el sexo biológico. Construye y ejecuta un prompt en ChatGPT para generar, a partir de nuestra base de datos, un visual que muestre la composición del público por sexo biológico en los estados de México y Puebla. Recuerda pedir que agrupe o apile los datos para la presentación.

Si necesitas ayuda, una opción de solución de la actividad estará disponible en la sección “Opinión del instructor”.

Ver opinión del instructor
Opinión del instructor

Existen diversas formas de solucionar esta actividad. A continuación, presentamos una sugerencia de solución para cada problema.

Es importante destacar que, incluso utilizando los prompts sugeridos, el resultado puede variar un poco debido a la aleatoriedad de las IAs generativas cuando utilices tu cuenta.

Podemos utilizar el siguiente prompt para la resolución del 1º desafío:

Tenemos un DataFrame llamado "df" y queremos construir una visualización de gráfico de columnas que presente la facturación por región de Zoop.
En "df", tenemos las siguientes columnas:
- region: región del/de la cliente
- precio_unitario: precio de una unidad del producto
- cantidad: cantidad vendida del producto
- envio: el valor del envío a ser pago en el total de la compra.
Deseamos crear una visualización que presente la facturación de cada región, donde la facturación se calcula multiplicando el precio unitario por la cantidad y sumando el envío.
Utiliza las bibliotecas de visualización de datos de Python para crear esta visualización.
Copia el código
Utilizando la respuesta de ChatGPT, obtenemos el siguiente código:

import pandas as pd
import matplotlib.pyplot as plt

# Suponiendo que df sea tu DataFrame
# Calcula la facturación para cada transacción
df['facturacion'] = (df['precio_unitario'] * df['cantidad']) + df['envio']

# Agrupa los datos por región y suma la facturación
facturacion_por_region = df.groupby('region')['facturacion'].sum().reset_index()

# Ordena el resultado para una mejor visualización
facturacion_por_region = facturacion_por_region.sort_values(by='facturacion', ascending=False)

# Creación del gráfico de columnas
plt.figure(figsize=(10, 6))  # Ajusta el tamaño del gráfico
plt.bar(facturacion_por_region['region'], facturacion_por_region['facturacion'], color='skyblue')  # Grafica barras
plt.title('Facturación por Región')  # Añade título al gráfico
plt.xlabel('Región')  # Añade etiqueta al eje X
plt.ylabel('Facturación')  # Añade etiqueta al eje Y
plt.show()  # Muestra el gráfico
Copia el código
La salida obtenida fue:

3.png

Podemos observar que ChatGPT generó un gráfico interesante, aunque sea la 1ª versión, todavía sin instrucciones para ajustar el visual. En este gráfico, tenemos la facturación por región en el año 2023, en orden descendente.

Ahora, vamos al 2º desafío, donde necesitamos generar una visualización que muestre el público por sexo biológico en los estados de México y Puebla. Podemos utilizar el siguiente prompt para la resolución de estos procesos:

Tenemos un DataFrame llamado "df" y queremos construir un gráfico de columnas apiladas que presente la cantidad de personas por sexo biológico en relación con los estados de "México" y "Puebla".

En "df", tenemos las siguientes columnas:

- estado: estado del/de la cliente. Utilizaremos únicamente los estados de "México" y "Puebla"
- sexo_biologico: sexo biológico del/de la cliente

Deseamos crear una visualización que presente la cantidad de personas agrupadas por sexo biológico en los estados que definimos.

Utiliza las bibliotecas de visualización de datos de Python para crear esta visualización.
Copia el código
Utilizando la respuesta de ChatGPT, obtenemos el siguiente código:

import pandas as pd
import matplotlib.pyplot as plt

# Filtrar el DataFrame para incluir solo los estados de "México" y "Puebla"
df_filtrado = df[df['estado'].isin(['Estado de México', 'Puebla'])]

# Contar la cantidad de personas por sexo biológico y estado
contagem_por_sexo_e_estado = df_filtrado.groupby(['estado', 'sexo_biologico']).size().unstack(fill_value=0)

# Crear el gráfico de columnas apiladas
contagem_por_sexo_e_estado.plot(kind='bar', stacked=True, figsize=(10, 6))

# Añadir título y etiquetas a los ejes
plt.title('Cantidad de Personas por Sexo Biológico en los estados de México y Puebla')
plt.xlabel('Estado')
plt.ylabel('Cantidad de Personas')
plt.xticks(rotation=0)  # Mantén las etiquetas de los estados en horizontal para mejor legibilidad

# Mostrar la leyenda y el gráfico
plt.legend(title='Sexo Biológico')
plt.show()
Copia el código
La salida es:

4.png

 Discutir en el Foro
**************************************************************************************+
10 Lo que aprendimos
 Siguiente pregunta

Lo que aprendimos en esta aula:

Seguir las premisas del proyecto construyendo la primera versión de los visuales con la ayuda de ChatGPT.
Seleccionar los datos deseados y crear nuevas columnas para adaptarlos a lo que se solicita.
Identificar los tipos de visuales, dónde pueden ser utilizados y cómo se presentan los datos.
Escribir prompts para la generación de cada visual.
Optimizar prompts para obtener mejores resultados con la herramienta de ChatGPT.
Con la asistencia de ChatGPT logramos:

Generar códigos para visuales de comparación y composición de datos.
Crear visuales incluso sin especificar el tipo de gráfico, a través de instrucciones sobre las columnas de los datos existentes.
Traducir los datos de los meses a un visual de gráfico de líneas mediante un diccionario.
*************************************************************************************************
03.Generando más visualizaciones
01
Proyecto del aula anterior
 Siguiente pregunta

¿Comenzando en esta etapa? Aquí puedes descargar los archivos del proyecto que hemos avanzado hasta el aula anterior.

Descargue los archivos en Github o haga clic aquí para descargarlos directamente.
***************************************************************************************************
02
Composición de datos estáticos
¡Hola! En esta clase, exploramos los gráficos de composición para datos estáticos, es decir, datos que no cambian con el tiempo.

Puntos clave:

Gráficos de Composición Estáticos: Se utilizan para visualizar la proporción de diferentes categorías en un conjunto de datos en un momento específico.
Ejemplo Práctico: Se analizó la proporción de usuarios que participan en un programa de cashback utilizando un gráfico de torta (o pie chart).
Implementación en Python: Se mostró cómo crear un gráfico de torta utilizando las bibliotecas matplotlib para visualizar la proporción de usuarios participantes.
Personalización: Se explicó cómo personalizar el gráfico, cambiando los colores y el tipo de gráfico (de torta a rosquilla).
Uso Adecuado: Los gráficos de torta son ideales para datos con pocas categorías, especialmente datos dicotómicos (sí/no, verdadero/falso).
¿Te gustaría que profundicemos en algún aspecto en particular o tienes alguna pregunta?
//////////////////////////////////////////////////////////////////////////////////////////////
03
¿Cuál es el prompt ideal?
 Siguiente pregunta

Juan continuó trabajando con la base que contenía los datos sobre el PIB y los Valores Agregados de Bienes y Servicios de Brasil entre los años 2002 y 2020.

En una de las agregaciones que realizó, Juan creó la siguiente tabla que representa el Valor Agregado Total (sin Agropecuaria) y el Valor Agregado en Agropecuaria en 2020:

Tipo	Valor
0	VA Total sin Agropecuaria	6.594937e+12
1	VA Agropecuaria	4.346210e+11
Juan quisiera crear un visual que muestre la proporción que el sector Agropecuario tiene sobre el Valor Agregado Total en 2020.

Con base en lo que hemos aprendido a lo largo de las clases, ¿cuál de los siguientes prompts sería adecuado para la generación del visual deseado por Juan?

Alternativa incorreta
Tenemos un DataFrame llamado "df" y queremos construir un gráfico de barras que muestre la proporción del VA de Agropecuaria en relación al Valor Agregado Total. Tenemos 2 columnas en nuestros datos, "Tipo" con el tipo de dato que vamos a presentar y "Valor" con los valores de valor agregado total (sin agropecuaria) y de agropecuaria en 2020. Utilice las bibliotecas de visualización de datos de Python para crear esta visualización.


Alternativa incorreta
Tenemos un DataFrame llamado "df" y queremos construir un visual de pizza que muestre la proporción del VA de Agropecuaria en relación al Valor Agregado Total. Los datos estarán en diferentes porciones. Utilice las bibliotecas de visualización de datos de Python para crear esta visualización.


Alternativa incorreta
Tenemos un DataFrame llamado "df" y queremos construir un visual de pizza que muestre la proporción del VA de Agropecuaria en relación al Valor Agregado Total. Tenemos 2 columnas en nuestros datos, "Tipo" con el tipo de dato que vamos a presentar y "Valor" con los valores de valor agregado total (sin agropecuaria) y de agropecuaria en 2020. Utilice las bibliotecas de visualización de datos de Python para crear esta visualización.


Este es el prompt ideal, ya que especifica todos los procesos necesarios para alcanzar el comportamiento deseado, solicitando la generación de un código para el visual con los datos de agropecuaria y valor agregado total.

Alternativa incorreta
Tenemos un DataFrame llamado "df" y queremos construir un gráfico de línea que muestre la proporción del VA de Agropecuaria en relación al Valor Agregado Total. Tenemos 2 columnas en nuestros datos, "Tipo" con el tipo de dato que vamos a presentar y "Valor" con los valores de valor agregado total (sin agropecuaria) y de agropecuaria en 2020. Utilice las bibliotecas de visualización de datos de Python para crear esta visualización.


¡Enhorabuena, has acertado!
 Discutir en el Foro
********************************************************************************************
04
Distribución de datos
¡Hola! En esta clase, aprendimos sobre los gráficos de distribución, que son útiles para mostrar cómo se distribuyen los datos. Nos enfocamos en cómo usar un histograma para visualizar la distribución de las calificaciones de las compras en ZOOP.

Aquí están los puntos clave:

Gráficos de Distribución: Ayudan a entender la distribución de los datos para el storytelling en informes.

Ejemplo Práctico: Usamos un dataframe llamado df con una columna nota (calificaciones de 0 a 10) para crear un histograma.

ChatGPT: No necesitamos especificar que queríamos un histograma; ChatGPT lo sugirió automáticamente al hablar de distribución.

Código:

python
Copiar código
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 6))
sns.histplot(DF['nota'], bins=10, kde=False, color='skyblue')
plt.title('Distribución de las calificaciones de las compras')
plt.xlabel('Calificación (0 a 10)')
plt.ylabel('Frecuencia')
plt.show()
Interpretación: El histograma mostró que las calificaciones más frecuentes estaban entre 8 y 10, indicando buenos números en general.

Tarea: Se propuso cambiar la columna nota por edad en el prompt para ver cómo cambia el gráfico.

Espero que este resumen te sea útil. ¡No dudes en preguntar si tienes más preguntas!
****************************************************************************************
05
Para saber más: histogramas y gráficos de densidad
 Siguiente pregunta

En el video anterior, creamos un prompt que generó el código de un gráfico de distribución de acuerdo con las orientaciones que proporcionamos sobre nuestros datos. Aunque no especificamos el tipo de visualización, la IA determinó que el gráfico a generar sería un histograma de columnas.

Fue posible notar que el código generado por ChatGPT produjo una visualización muy adecuada para presentar la distribución de la muestra de datos que poseemos, donde cada columna representaba la frecuencia de repetición de un valor. Pero, ¿por qué ChatGPT no eligió, por ejemplo, un gráfico de densidad? ¿Cómo saber cuándo utilizar uno u otro?

Vamos a utilizar el propio ChatGPT para responder estas dudas.

Prompt: Estoy trabajando con la generación de visuales utilizando el Lenguaje Python y noté que uno de los gráficos generados fue un histograma de columna. Sin embargo, sé que también existe una forma de crear visualizaciones como un gráfico de densidad.

Explique por qué ChatGPT eligió presentar los datos de evaluaciones del público (valores enteros de 0 a 10) como un histograma de columna y no un gráfico de densidad. ¿Cuál es la diferencia entre estos dos visuales y cuándo podemos elegir uno u otro? Traiga ejemplos simples de la utilización de un histograma y un gráfico de densidad, en un contexto de e-commerce.

La respuesta dada por ChatGPT es la siguiente:

La elección entre un histograma de columnas (también conocido como histograma de barras) y un gráfico de densidad generalmente depende del tipo de datos que se analizan y del objetivo de la visualización.

¿Por qué un histograma de columnas?

El histograma de columnas se utiliza ampliamente para visualizar la distribución de frecuencias o conteos en un conjunto de datos. Este tipo de gráfico es particularmente eficaz para mostrar la distribución de variables discretas o categorías. En el caso de las evaluaciones del público, que son valores enteros de 0 a 10, un histograma de columnas permite visualizar claramente cuántas evaluaciones se recibieron para cada punto específico. Esto facilita la identificación de tendencias, como la concentración de evaluaciones en ciertas puntuaciones, y ayuda a comprender la distribución general de las evaluaciones.

Diferencia entre un Histograma de Columnas y un Gráfico de Densidad

Histograma de Columnas: Utiliza barras verticales para representar la frecuencia de cada categoría o intervalo de valores. La altura de cada barra indica el conteo o la proporción de observaciones en esa categoría.
Gráfico de Densidad: Utiliza una línea para trazar la distribución continua de los datos. Este tipo de gráfico es más adecuado para variables continuas, donde muestra la probabilidad de valores dentro de un continuo, proporcionando una idea de la densidad de los datos.
¿Cuándo elegir cada uno?

Histograma de Columnas: Es ideal para datos categóricos o discretos, cuando se desea visualizar la frecuencia o el conteo por categoría. Es útil cuando las categorías son pocas y están claramente definidas, como las calificaciones de 0 a 10.
Gráfico de Densidad: Es más adecuado para variables continuas, cuando se desea entender la distribución y densidad de los datos a lo largo de un intervalo. Es útil para visualizar la forma de la distribución de los datos, como una distribución normal, binomial, etc.
Ejemplos de Utilización en E-commerce

Histograma de Columnas: Imagina que deseas analizar las evaluaciones de los clientes para un producto específico en tu e-commerce. Las evaluaciones van de 0 a 5. Un histograma de columnas puede mostrar cuántos clientes dieron cada puntuación, permitiendo identificar rápidamente la satisfacción general de los clientes con el producto.

Gráfico de Densidad: Si estás analizando el tiempo que los clientes pasan en tu sitio de e-commerce antes de realizar una compra, los datos serían más continuos (por ejemplo, minutos). Un gráfico de densidad podría mostrar la distribución del tiempo de navegación, ayudando a identificar si la mayoría de los clientes compra rápidamente o pasa mucho tiempo navegando antes de decidir.

¿Qué opinas de la respuesta de ChatGPT?

Lo importante es darse cuenta de que nos brindó una buena explicación sobre la diferencia entre ambos gráficos y hasta señaló ejemplos en los que podríamos elegir entre uno u otro dependiendo de la naturaleza de nuestros datos.

 Discutir en el Foro
************************************************************************
06
Otros gráficos de distribución
¡Hola! En esta clase, aprendimos a usar ChatGPT para crear gráficos de distribución que nos ayuden a entender mejor a nuestra audiencia.

Aquí tienes un resumen de los puntos clave:

Pregunta de negocio: Queremos saber cómo se distribuye nuestra audiencia por edad y sexo biológico, y si hay algún grupo que destaque.
Gráfico de violín: ChatGPT nos sugirió este gráfico, que combina histograma, KDE y boxplot. Aunque es útil, puede ser difícil de leer.
BoxPlot: Cambiamos a un BoxPlot porque ofrece una visión más clara de la distribución de los datos, mostrando los valores mínimo, primer cuartil, mediana, tercer cuartil y máximo.
Interpretación: Con el BoxPlot, pudimos observar mejor la distribución de nuestros datos por edad y sexo biológico, identificando valores clave y outliers.
En resumen, aprendimos a usar ChatGPT para generar visualizaciones que nos ayuden a responder preguntas de negocio, y cómo elegir el tipo de gráfico adecuado para cada situación.

¿Hay algo más en lo que te pueda ayudar o alguna duda que tengas sobre la clase?
//////////////////////////////////////////////////////////////////////////////////////////////////
07
¿Cuál gráfico elegir?
 Siguiente pregunta

Serenatto - Café & Bistró está evaluando algunos de los platos que tiene en su menú para crear una oferta especial de almuerzo. Uno de los platos seleccionados para la oferta especial, en el periodo de 12:00 a 14:00 horas, fue el "Risotto de Funghi" y "Limoncello".

Sabiendo esto, la analista de datos, Daniela, decidió evaluar el comportamiento de compra de los(as) clientes para estos productos, verificando si realmente tienen éxito dentro del periodo deseado para el especial de almuerzo. Ella creó el siguiente prompt para generar una visualización que acompañe esos datos:

Prompt: Tenemos un DataFrame llamado "df_serenatto" y queremos construir un _______ que muestre la distribución de los productos "Risotto de Funghi" y "Limoncello" según las horas de venta.

En "df_serenatto", tenemos la columna “producto” con el tipo de producto, en la que solo utilizaremos "Risotto de Funghi" y "Limoncello", y la columna "horario" con los horarios de venta de los productos en horas y minutos. Queremos crear una visualización que muestre la distribución de estos datos.

Utiliza las bibliotecas de visualización de datos de Python para crear esta visualización.

Como puedes notar, no especificamos el tipo de visualización que será construida con el código generado por ChatGPT. Basado en lo que hemos aprendido hasta ahora, ¿qué visualizaciones pueden elegirse para representar los datos de los productos en relación con la hora de consumo?

Alternativa correta
Gráfico de pastel.


Alternativa correta
Boxplot.


Este es uno de los tipos de visualizaciones que pueden ser elegidos. Las horas pueden dividirse en intervalos iguales y los datos presentados sobre esta organización varían de acuerdo con la frecuencia de consumo.

Alternativa correta
Gráfico de barras verticales.


Alternativa correta
Histograma de columnas.


Este es uno de los tipos de visualizaciones que pueden ser elegidos. Las horas pueden dividirse en intervalos iguales y los datos presentados sobre esta organización varían de acuerdo con la frecuencia de consumo. Un gráfico de densidad también podría ser utilizado.

*****************************************************************************
08
Para saber más: tipos de gráficos==>> ver 25_IA_visualizar_datos....docx
 Siguiente pregunta

Hemos revisado todos los visuales que refinaremos a partir de la próxima lección para la creación del informe con los datos de Zoop. Podemos practicar la generación de códigos para una serie de gráficos y comprender durante la lección un poco sobre cada uno de ellos.

En esta actividad, te traigo un resumen de algunos de los principales visuales utilizados en el día a día, algunas buenas prácticas y para qué son utilizados. La elección del tipo de gráfico adecuado tiene en cuenta el tipo de dato, la organización y el objetivo que tenemos en cada análisis. ¿Vamos a entender qué gráficos son más adecuados dependiendo del contexto y de la información deseada?

Gráfico de columnas y barras horizontales
Un gráfico de columnas es ideal para la representación de valores numéricos de una o más categorías de datos, sean discretas o de intervalos definidos. Facilita una comparación rápida y directa entre diferentes categorías, siendo uno de los gráficos más utilizados en informes y presentaciones. El ejemplo a continuación demuestra este comportamiento:

5.png

El gráfico de barras horizontales es ideal cuando queremos presentar las categorías a la izquierda de forma horizontal, siendo la forma más fluida de leer textos que puedan ser extensos. El enfoque de este tipo de gráfico está primero en la categoría de los datos y, en segundo lugar, en los valores numéricos.

6.png

Gráfico de columnas agrupadas y columnas apiladas
Un gráfico de columnas o barras agrupadas es ideal cuando queremos comparar diferentes categorías respecto a una variable, mostrando cómo los valores se comparan dentro de cada categoría (en el ejemplo, los trimestres) en columnas separadas (en el ejemplo, productos E, D y F) y entre los diferentes grupos, facilitando la visualización de patrones y diferencias entre ellos.

7.png

Un gráfico de columnas o barras apiladas es útil cuando queremos añadir a la comparación entre periodos o categorías, la comparación dentro de cada una. Este tipo de gráfico permite observar la composición de cada columna según la variable deseada (por ejemplo, las preferencias de consumo de café o té).

8.png

Gráfico de línea
Los gráficos de línea son ideales para representar tendencias a lo largo del tiempo o una secuencia ordenada. Cuando se tiene una gran cantidad de periodos, vale la pena usar gráficos de líneas para representar series temporales.

9.png

Los gráficos de líneas añaden una variable categórica a los análisis, permitiendo la comparación de series temporales en períodos de tiempo cortos o largos. En el ejemplo a continuación, observamos la facturación por región dividida por trimestres de un año cualquiera. Es posible comparar las facturaciones en cada región en diferentes momentos utilizando solo una visualización.

10.png

Gráfico de pastel y de dona
El gráfico de pastel se usa para representar proporciones de diferentes categorías o partes de un todo. Es ideal para composiciones estáticas, ya sea por valores numéricos o porcentajes. Hay que tener cuidado de no usar más de 5 categorías o categorías con proporciones muy similares o muy dispares.

11.png

El gráfico de dona es una alternativa al gráfico de pastel, adecuado cuando queremos reducir la superficie colorida, pasando a utilizar coronas circulares. Ambos gráficos son ideales para pocas categorías de datos.

12.png

Gráfico de cascada
Los gráficos de cascada se usan para visualizar ajustes incrementales a un valor inicial, lo que los hace ideales para ver flujos o fluctuaciones de valores numéricos a lo largo del tiempo.

13.png

Histograma
Los histogramas se utilizan para observar la distribución de los datos en un intervalo dado. Estos intervalos, llamados "bins", muestran cuántas observaciones caen dentro de esa franja.

14.png

Gráfico de dispersión
Los gráficos de dispersión se utilizan para representar la relación o distribución entre dos variables numéricas. Cada punto en el gráfico representa una combinación de coordenadas, facilitando la identificación de patrones, tendencias y correlaciones importantes para el aprendizaje automático.

15.png

*********************************************************************+
09
Desafío: perfil de los clientes
 Siguiente pregunta

Volviendo a nuestro proyecto de Manos a la Obra, logramos generar dos visualizaciones más con los datos de nuestros desafíos.

¿Ahora, vamos a crear otros visuales enfocados en el perfil de nuestros clientes?

Has recibido una nueva solicitud de Zoop para generar 2 visuales, siendo uno de ellos relacionado al registro de clientes para un nuevo servicio que Zoop implementará, el Zoop Pay, y el otro sobre las evaluaciones de los clientes en relación con su ubicación. Observemos las dos situaciones y construyamos con la ayuda de ChatGPT los dos gráficos solicitados:

Desafío 1:

Zoop está en proceso de lanzamiento de su billetera digital, que brindará acceso a una serie de beneficios para sus clientes, y le gustaría saber cuál es el porcentaje de personas que ya están pre-registradas para este producto. El e-commerce busca comprender este número para definir la necesidad de promoción y esfuerzo para atraer más clientes a esta funcionalidad.

Construye y ejecuta un prompt en ChatGPT para generar, a partir de nuestra base de datos, un visual que presente la proporción de personas pre-registradas en Zoop Pay.

Desafío 2:

Zoop quiere analizar la distribución de las edades de los clientes por región con el fin de delinear una "persona" (perfil) de su clientela en diferentes localidades del país, y para ello, solicitó un visual que distribuya estos datos. Construye y ejecuta un prompt en ChatGPT para generar, a partir de nuestra base de datos, un visual que muestre la distribución de las edades de los clientes por región.

Si necesitas ayuda, una opción de solución de la actividad estará disponible en la sección "Opinión del instructor".

Ver opinión del instructor
Opinión del instructor

Existen diversas formas de solucionar esta actividad. A continuación, presentamos una sugerencia de solución para cada problema.

Es importante destacar que, incluso utilizando los prompts sugeridos, el resultado puede variar un poco debido a la aleatoriedad de las IAs generativas cuando utilices tu cuenta.

Podemos utilizar el siguiente prompt para la resolución del 1º desafío:

""" Tenemos un DataFrame llamado "df" y queremos construir una visualización que presente la proporción de los(as) usuarios(as) que realizaron el pre-registro en Zoop Pay, la nueva solución de Zoop.

En "df", tenemos la columna "zoop_pay" que contiene estos datos. Construye un gráfico de dona donde el valor "Sí" reciba el color #2a9d8f y "No" el color #edede9.

Utiliza las bibliotecas de visualización de datos de Python para crear esta visualización. """

Utilizando la respuesta de ChatGPT, obtenemos el siguiente código:

import pandas as pd
import matplotlib.pyplot as plt

# Contabiliza la cantidad de usuarios que realizaron el pre-registro en Zoop Pay
pre_registro_counts = df['zoop_pay'].value_counts()

# Define los colores para cada valor
colors = ['#2a9d8f' if valor == 'Sí' else '#edede9' for valor in pre_registro_counts.index]

# Crea el gráfico de dona
plt.figure(figsize=(8, 6))
plt.pie(pre_registro_counts, labels=pre_registro_counts.index, autopct='%1.1f%%', startangle=140, colors=colors, wedgeprops=dict(width=0.3))

# Añade un título al gráfico
plt.title('Proporción de Pre-registro en Zoop Pay')

# Muestra el gráfico
plt.show()
Copia el código
Salida:

16.png

El gráfico generado muestra que menos de ¼ de los clientes que realizaron compras en 2023 en Zoop están registrados para participar en Zoop Pay. Puede ser interesante investigar el perfil de los clientes que aún no han realizado el registro, en situaciones como edad, forma de pago, región de residencia, entre otros.

Ahora, vamos al 2º desafío, en el que necesitamos generar una visualización que muestre el perfil de los clientes por edad y región. Podemos utilizar el siguiente prompt para la resolución de estos procesos:

""" Tenemos un DataFrame llamado "df" y queremos construir una visualización que muestre la distribución de las edades de los(as) clientes por región.

En "df", tenemos las siguientes columnas:

region: región de la persona que realizó la compra.

edad: edad de la persona que realizó la compra.

Deseamos crear una visualización de boxplot que presente la distribución de estos datos. Coloca las edades en el eje x y las regiones en el eje y.

Utiliza las bibliotecas de visualización de datos de Python para crear esta visualización. """

Utilizando la respuesta de ChatGPT, obtenemos el siguiente código:

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Creación del boxplot
plt.figure(figsize=(12, 8))  # Define el tamaño del gráfico
boxplot = sns.boxplot(x='edad', y='region', data=df, palette="colorblind")  # Crea el boxplot

# Añade títulos y etiquetas a los ejes
plt.title('Distribución de las Edades de los Clientes por Región')  # Título del gráfico
plt.xlabel('Edad')  # Etiqueta del eje X
plt.ylabel('Región')  # Etiqueta del eje Y

# Muestra el gráfico
plt.show()
Copia el código
Salida:

17.png

Este gráfico nos ofrece algunos insights interesantes. Por ejemplo, en las regiones Sur y Centro tenemos clientes con la mayor mediana de edad en comparación con otras, mientras que en la región Centro-Sur hay una mayor concentración de mediana de edad de clientes más jóvenes en relación a todas las regiones de México.

La práctica es siempre muy importante para afianzar el contenido. Utilizar IAs para apoyar en el análisis de datos ayuda mucho a optimizar el tiempo en la construcción del código y puede generar ideas que contribuyan en tu proceso de análisis exploratorio de datos. Sin embargo, recuerda que es muy importante analizar las respuestas generadas por las IAs generativas para investigar si lo que se ha presentado tiene sentido y si realmente resuelve el problema que estás enfrentando.

Compartir tus conocimientos y las prácticas que has estado desarrollando en este aspecto es importante para tu crecimiento en la carrera de datos. Por lo tanto, realiza los ejercicios propuestos y observa cómo esto puede ayudarte a progresar en tus habilidades de análisis de datos con IAs.

Si tienes alguna duda, puedes usar el foro o el Discord de Alura.
**************************************************************************
10
Lo que aprendimos
 Siguiente pregunta

Lo que aprendimos en esta aula:

Crear más visuales siguiendo las demandas de las partes interesadas.
Reconocer que, dado que ChatGPT no tiene acceso directo a nuestros datos, necesitamos ser precisos en la descripción de los mismos.
Identificar los tipos de visuales, dónde pueden ser utilizados y cómo se presentan los datos.
Obtener más información y guiar a ChatGPT a través de prompts complementarios.
Optimizar los prompts para generar mejores resultados con la herramienta de ChatGPT.
Con la asistencia de ChatGPT, logramos:

Generar códigos para visuales de proporción y distribución de datos.
Crear visuales incluso sin especificar el tipo de gráfico, a través de instrucciones sobre los datos existentes.
Variar el tipo de gráfico con los mismos datos.
*****************************************************************
****************************************************************
04.Técnicas de Storytelling
01
Proyecto del aula anterior
 Siguiente pregunta

¿Comenzando en esta etapa? Aquí puedes descargar los archivos del proyecto que hemos avanzado hasta el aula anterior.

Descargue los archivos en Github o haga clic aquí para descargarlos directamente.
*****************************************************************************
02
Definiendo los colores del proyecto
¡Hola! En esta clase, exploramos la importancia de definir los aspectos estéticos de las gráficas, enfocándonos en los colores.

Estos son los puntos clave que cubrimos:

Percepción humana de los colores: Cada color evoca emociones y significados diferentes, por lo que es crucial elegir los colores correctos para transmitir la información de manera clara y eficaz, respetando la identidad visual de ZOOP.
Accesibilidad: Es importante garantizar que las visualizaciones sean inclusivas y fáciles de entender para todos, incluyendo personas con daltonismo.
Inteligencia artificial y la elección de colores: Aunque la IA puede analizar datos y reconocer patrones, carece del criterio humano para elegir colores significativos que garanticen la accesibilidad.
Experiencia visual: Debemos asegurarnos de que la audiencia comprenda los gráficos y que no haya conflictos de colores que perjudiquen la claridad del mensaje.
En resumen, la elección de colores es fundamental para crear visualizaciones de datos efectivas, accesibles y que transmitan la información de manera clara y significativa. ¿Te gustaría que profundizáramos en alguno de estos puntos?
*****************************************************************
03
Para saber más: tipos de gráficos
 Siguiente pregunta

En esta clase, vamos a hablar mucho sobre la creación de visuales del curso y practicar técnicas para trabajar en la estética de los gráficos. Por lo tanto, nada mejor que revisar tres propiedades fundamentales del diseño para garantizar una buena comunicación visual. ¿Vamos allá?

1. Uso de los colores

El uso correcto de los colores en proyectos visuales es importante para garantizar legibilidad y uniformidad en los materiales, y para ello, deben observarse dos parámetros: contraste y consistencia.

Contraste

El contraste es simplemente la diferencia entre dos cosas en un contexto comparativo. En la práctica, evaluamos el contraste relacionando colores, ya que no tiene sentido en un solo color. Contrastes más fuertes significan colores más diferentes entre sí, mientras que contrastes más débiles denotan colores más similares. Aquí es importante tener cuidado con esta proximidad porque los colores similares dificultan la comprensión de los gráficos.

18.png

Compara los dos gráficos anteriores. Observa cómo en el de la izquierda el contraste de colores es menor y, por lo tanto, la separación entre las partes de la pizza es menos visible. Usar un solo color como guía no es problemático, pero asegúrate de proporcionar suficiente contraste entre todos los tonos elegidos.

Consistencia

En un proyecto con muchos gráficos debe existir un patrón en el uso de los colores. De lo contrario, los materiales no parecen formar parte del mismo conjunto y transmiten una sensación de falta de profesionalismo, sugiriendo que fueron hechos sin seguir un patrón bien definido.

19.png

Observa cómo los gráficos a la derecha, que siguen una misma orientación cromática, tienen un acabado más profesional.

2. Tipografía

Los gráficos brindan una disposición más visual a la información textual y ofrecen una presentación más clara de los datos que el texto corrido. Aun así, los gráficos estarán acompañados de algún texto, como títulos y leyendas, y deben ser legibles. Para ello, deben considerarse dos atributos relacionados con la tipografía:

Tamaño: Las palabras deben tener un tamaño mínimo para que se puedan leer sin dificultades. En trabajos impresos, usa al menos 10 pt y 20 pt para gráficos en presentaciones.

Estilo: Evita tipografías muy ornamentadas, cursivas o con características excesivamente acentuadas, ya que tienden a tener una legibilidad deficiente en dimensiones menores y en extensiones mayores de texto.

20.png

En caso de duda, da prioridad a las familias tipográficas más simples, como en el gráfico de la derecha.

3. Jerarquía de la información

¿Alguna vez has estado en una conversación en la que todos hablan al mismo tiempo y nadie se entiende? Lo mismo sucede en la comunicación visual si todo en la pantalla o en el papel quiere ser destacado al mismo tiempo: es necesario definir solo uno o dos elementos. De esta manera, colores y texto, especialmente, deben ser manipulados de manera que no saturen al lector con información.

21.png

Evita seleccionar muchos colores "fuertes" y no exageres con el tamaño y el peso del texto. Observa cómo el gráfico de la izquierda está mucho más "saturado" visualmente, con todos los elementos "hablando" al mismo tiempo. Busca equilibrar más estos elementos visuales, como se hizo en el gráfico de la derecha, donde los colores y la tipografía se han retrabajado.
*************************************************************************
04
Iniciando el Storytelling
¡Hola! En esta clase, aprendimos cómo mejorar nuestros gráficos utilizando técnicas de storytelling e inteligencia artificial, enfocándonos en la identidad visual de ZOOP.

Aquí están los puntos clave:

Gráfico de Métodos de Pago: Se tomó el gráfico inicial de los métodos de pago y se mejoró visualmente.
Código Python: Se utilizó matplotlib.pyplot para crear un gráfico de barras que muestra la cantidad de cada método de pago. Se aplicaron colores y estilos específicos para seguir la identidad visual de ZOOP.
Personalización:
El fondo del gráfico y la figura se establecieron en color gris 1.
Las barras se colorearon en rojo 1.
Se añadió un título en gris 5 con tamaño de fuente 18.
Las etiquetas de los ejes x e y se definieron en azul 1 con tamaño de fuente 12.
Se eliminaron los bordes superior, derecho e izquierdo del gráfico.
Se mostró el total de cada método de pago encima de cada columna en color azul 1 y tamaño 12.
Limpieza Visual: Se eliminaron elementos distractores y se ajustó el diseño para que se adapte a la identidad visual de ZOOP.
Resultado: Se obtuvo un gráfico limpio y llamativo que muestra claramente la cantidad de cada método de pago utilizado, listo para ser exportado e incluido en un informe de ventas.
En resumen, la clase se centró en cómo mejorar la visualización de datos mediante la personalización y la aplicación de técnicas de storytelling, utilizando Python y la biblioteca matplotlib. El objetivo es crear gráficos más claros y atractivos que se ajusten a la identidad visual de la empresa.

¿Te gustaría que repasemos algún punto en específico o tienes alguna pregunta?
//////////////////////////////////////////////////////////////////////
05
¿Cómo refinar el gráfico?
 Siguiente pregunta

Regresamos a nuestro problema con Daniela y los visuales para Serenatto - Café & Bistrô. Esta vez, ella recibió la tarea de presentar los números trimestrales de ventas de tres productos de la filial: “Gnocchi”, “Pizza Margherita” y “Ratatouille”. Estos productos se añadieron por primera vez al menú a partir del comienzo del 2º semestre de 2023.

Para acomodar todos los datos en un solo gráfico, Danielle optó por crear un gráfico de columnas agrupadas como el que se muestra a continuación:

22.png

Ya hemos notado algunas mejoras que se pueden realizar en este visual, ¿verdad?

Teniendo en cuenta lo que hemos aprendido sobre las técnicas de visualización, ¿cuáles de las siguientes opciones traen buenas ideas para el refinamiento del visual creado por Daniela?

Alternativa correta
Cambiar el orden de los valores de mayor a menor, ya que tiene más sentido observar los datos en orden creciente de valor.


Alternativa correta
Eliminar la leyenda y colocar el nombre de cada producto en el gráfico, eliminando la necesidad de añadir un elemento más al gráfico.


Alternativa correta
Ajustar las etiquetas del eje X con los datos de los trimestres para que estén en horizontal, facilitando la lectura de los trimestres.


Esta es una de las acciones que podemos aplicar. La lectura de los datos del trimestre de manera vertical puede resultar incómoda para quienes leen el gráfico, ya que estamos acostumbrados a leer en horizontal. Adaptar esta orientación al visual es primordial.

Alternativa correta
Ajustar el eje Y para que comience en 0, evitando interpretaciones erróneas al comparar los productos.


Esta es una de las acciones que podemos aplicar. Cuando comparamos valores, casi siempre es necesario comenzar desde 0 en el eje Y, ya que evita distorsiones en la representación y falsas interpretaciones de los datos.

¡Enhorabuena, has acertado!
***************************************************
06
Para saber más: elementos de un gráfico en Matplotlib
 Siguiente pregunta

En el video anterior, creamos un prompt que alteró una serie de elementos dentro de nuestro visual, dándole una nueva apariencia siguiendo las orientaciones para la creación de un visual de Zoop en términos de colores, etiquetas, títulos, datos, entre otros. Algunos de los elementos los especificamos para la IA de ChatGPT y otros solo proporcionamos algunas instrucciones que ayudaron a guiar dónde y qué queremos cambiar.

Se pudo notar que el código generado por ChatGPT produjo un visual bastante cercano al deseado sin aumentar drásticamente el tamaño del código, manteniéndolo entendible. Pero, ¿cuáles son los elementos visuales que alteramos y vamos a alterar? ¿Cómo saber qué hace cada uno?

Vamos a utilizar ChatGPT para responder a estas dudas.

Prompt:

Crea un texto que hable brevemente sobre los elementos de un gráfico en la biblioteca Matplotlib, como, por ejemplo, xticks(), yticks(), xlabel(), ylabel(), text(), annotate, entre otros. Da ejemplos para cada buena práctica orientada a un proyecto simple de Data Science con Python.

La respuesta dada por ChatGPT es la siguiente:

La biblioteca Matplotlib es una de las herramientas más populares y poderosas para la creación de gráficos y visualizaciones de datos en Python. Ofrece una amplia gama de funcionalidades y elementos que pueden ser personalizados para mejorar la legibilidad y la presentación de las visualizaciones de datos. Aquí están algunos de los elementos clave que puedes utilizar al crear gráficos con Matplotlib, acompañados de buenas prácticas y ejemplos orientados a un proyecto simple de Data Science.

1. xticks y yticks

Estas funciones se usan para personalizar los ticks de los ejes X e Y. Ajustar estos elementos puede mejorar la legibilidad de los gráficos, especialmente cuando se trabaja con datos que tienen escalas grandes o pequeñas, o cuando los valores están densamente distribuidos. Ejemplo: plt.xticks(range(0, 101, 10)) define los ticks del eje X para valores de 0 a 100, con intervalos de 10.

2. xlabel y ylabel

Son etiquetas para los ejes X e Y, respectivamente. Son esenciales para indicar lo que representa cada eje. Nombra tus ejes con etiquetas claras e informativas. Esto hace que el gráfico sea comprensible sin necesidad de consultar el contexto externo. Ejemplo: plt.xlabel('Tiempo (años)') y plt.ylabel('Población (millones)').

3. Título (title) y subtítulos

Agrega un título al gráfico, proporcionando una visión general inmediata de lo que el gráfico está mostrando. Los subtítulos pueden usarse para proporcionar información adicional o contextual. Usa un título descriptivo que pueda reducir la necesidad de etiquetas y considera los subtítulos para detalles adicionales, como la fuente de los datos o observaciones específicas. Ejemplo: plt.title('Crecimiento Poblacional a lo Largo del Tiempo').

4. Leyenda (legend)

La leyenda ayuda a identificar diferentes series o categorías dentro de un gráfico. Es crucial cuando un gráfico contiene múltiples líneas, barras u otros elementos visuales. Usa leyendas claras y coloca la leyenda de manera que no obstruya los datos. plt.legend(loc='best') elige automáticamente la mejor ubicación para la leyenda. Ejemplo: plt.legend(['Producto A', 'Producto B']).

5. Anotación (text y annotate)

La anotación permite agregar textos explicativos en puntos específicos del gráfico, lo que puede ser útil para resaltar características o puntos de datos importantes. text permite agregar texto en cualquier parte del gráfico, mientras que annotate se usa para añadir anotaciones con la opción de incluir una flecha que apunte a una parte específica del gráfico. Usa plt.annotate() para agregar anotaciones que aclaren puntos de datos inusuales o tendencias notables. Especifica la ubicación de la anotación y el punto de datos a ser anotado. Ejemplo: plt.annotate('Pico Máximo', xy=(2020, 500), xytext=(2021, 600), arrowprops=dict(facecolor='black')) destaca un pico en el gráfico.

6. Rejilla (grid)

Agrega una rejilla al gráfico, lo que puede mejorar significativamente la legibilidad al estimar valores. Las líneas de rejilla ayudan a leer los gráficos al proporcionar líneas de referencia que facilitan la correlación de los valores de los datos con los ejes. Activa la rejilla cuando tengas muchos puntos de datos o cuando necesites facilitar la comparación de valores. Ejemplo: plt.grid(True) habilita la visualización de la rejilla en el gráfico.

Utilizar estos elementos adecuadamente puede mejorar significativamente la calidad de tus visualizaciones de datos, haciéndolas no solo más atractivas visualmente, sino también más informativas y fáciles de entender. En proyectos de Data Science, donde la comunicación efectiva de los resultados es esencial, dominar estos elementos de Matplotlib es una habilidad valiosa.

¿Te gustó la respuesta de ChatGPT?

Nos proporcionó una buena explicación sobre los diferentes elementos de un gráfico en la biblioteca Matplotlib de Python y señaló ejemplos de cómo podemos crearlos dentro del código. ¿Qué te parece si te sumerges en la biblioteca de Matplotlib para aprender más sobre estos y otros elementos para mejorar tu visual?
************************************************************************************+
07
Añadiendo texto a nuestros gráficos
¡Hola! En esta clase, aprendimos cómo mejorar la narrativa de nuestros gráficos añadiendo texto informativo. Aquí tienes una analogía para entenderlo mejor:

Imagina que tu gráfico es una película. Al principio, tienes las imágenes (los datos visualizados), pero falta algo para que la historia sea completa. Añadir texto a tu gráfico es como añadir diálogos o subtítulos a la película. Estos elementos textuales ayudan a la audiencia a entender mejor la trama y a conectar con la historia.

En la clase, usamos ChatGPT para crear un texto que resume un hallazgo importante en los datos: el porcentaje de clientes que usan tarjeta de crédito o transferencia. Luego, colocamos este texto directamente en el gráfico, como un subtítulo que resalta una escena clave.

Al igual que un buen diálogo puede hacer que una película sea más impactante, añadir texto informativo a tu gráfico puede aumentar significativamente la relevancia de los datos y proporcionar mayor información a la audiencia. ¡Espero que esta analogía te ayude a visualizar el concepto! ¿Te gustaría que te proporcionara algún ejemplo o ejercicio para practicar esta técnica?

Copiar texto de Luri al portapapeles
/////////////////////////////////////////////////////////////////////////////////////////////
08
Destacando una columna en los datos
 Siguiente pregunta

Ahora, Daniela ha comenzado otro análisis de datos para Serenatto - Café & Bistrô. En esta tarea, creó un gráfico con los métodos de pago más utilizados en el 2º semestre de 2023 en el restaurante, con la ayuda de ChatGPT, usando el siguiente prompt:

""" Tenemos un DataFrame llamado "df" y queremos construir un gráfico de columnas que muestre cuáles métodos de pago fueron los más utilizados en Serenatto Café & Bistrô. Para ello, tenemos la columna "metodo_pago" con los 4 tipos de pago utilizados en la compra.

El título de la figura es "Métodos de pago más utilizados en el 2º semestre de 2023" con tamaño 14 y las columnas deben estar en color "honeydew", excepto la columna del método de pago más utilizado, que debe ser de color "seagreen". Las etiquetas del eje y (yticks) deben ser excluidas, al igual que las etiquetas de los ejes x e y (xlabel y ylabel), y las etiquetas del eje X (xticks) deben tener tamaño 12. Todos los bordes deben ser excluidos.

Finalmente, muestra el total de cada método de pago sobre cada columna, con tamaño 12, donde el valor mayor debe estar en negrita. Utiliza las bibliotecas de visualización de datos de Python para crear esta visualización. """

Podemos observar a través del prompt que solo la columna con el mayor valor tendrá un destaque tanto en el color de la barra como en el valor. Este comportamiento puede ser visto en el visual generado por el código retornado por ChatGPT:

23.png

Considerando el prompt escrito arriba y el visual generado por Daniela, ¿cuál de los códigos abajo es una posible respuesta del ChatGPT al visual que construyó?

Alternativa incorreta
import matplotlib.pyplot as plt

metodos_pago = df['metodo_pago'].value_counts()
metodo_mas_utilizado = metodos_pago.idxmax()
colores = ['honeydew'] * len(metodos_pago)
colores[metodos_pago.index.get_loc(metodo_mas_utilizado)] = 'seagreen'

plt.figure(figsize=(10, 6))
plt.bar(metodos_pago.index, metodos_pago.values, color=colores)

for i, valor in enumerate(metodos_pago.values):
    plt.text(i, valor + 20, str(valor), ha='center', fontsize=12, weight='bold' if valor == metodos_pago.max() else 'normal')

plt.title('Métodos de pago más utilizados en el 2º semestre de 2023', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks([])
plt.ylim(0, 3000)
plt.xlabel('')
plt.ylabel('')
plt.gca().spines[['top', 'right','left', 'bottom']].set_visible(False)
plt.show()

Este es el código correcto y posible de ser descrito por ChatGPT, ya que genera un gráfico de columnas destacando el método de pago más utilizado (Tarjeta de crédito).

Alternativa incorreta
import matplotlib.pyplot as plt

metodos_pago = df['metodo_pago'].value_counts()
cores = ['honeydew', 'seagreen']

plt.figure(figsize=(10, 6))
plt.bar(metodos_pago.index, metodos_pago.values, color=cores)

for i, valor in enumerate(metodos_pago.values):
    plt.text(i, valor + 20, str(valor), ha='center', fontsize=12, weight='bold' if valor == metodos_pago.max() else 'normal')

plt.title('Métodos de pago más utilizados en el 2º semestre de 2023', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks([])
plt.ylim(0, 3000)
plt.xlabel('')
plt.ylabel('')
plt.gca().spines[['top', 'right','left', 'bottom']].set_visible(False)
plt.show()

Alternativa incorreta
import matplotlib.pyplot as plt

metodos_pago = df['metodo_pago'].value_counts()

plt.figure(figsize=(10, 6))
plt.bar(metodos_pago.index, metodos_pago.values)

for i, valor in enumerate(metodos_pago.values):
    plt.text(i, valor + 20, str(valor), ha='center', fontsize=12, weight='bold' if valor == metodos_pago.max() else 'normal')

plt.title('Métodos de pago más utilizados en el 2º semestre de 2023', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks([])
plt.ylim(0, 3000)
plt.xlabel('')
plt.ylabel('')
plt.gca().spines[['top', 'right','left', 'bottom']].set_visible(False)
plt.show()

Alternativa incorreta
import matplotlib.pyplot as plt

metodos_pago = df['metodo_pago'].value_counts()
metodo_mais_utilizado = metodos_pago.idxmax()
colores = ['honeydew'] * len(metodos_pago)
colores[metodos_pago.index.get_loc(metodo_mais_utilizado)] = 'seagreen'

plt.figure(figsize=(10, 6))
plt.bar(metodos_pago.index, metodos_pago.values, color=colores)

for i, valor in enumerate(metodos_pago.values):
    plt.text(i, valor + 20, str(valor), ha='center', fontsize=12, weight='bold')

plt.title('Métodos de pago máss utilizados en el 2º semestre de 2023', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks([])
plt.ylim(0, 3000)
plt.xlabel('')
plt.ylabel('')
plt.gca().spines[['top', 'right','left', 'bottom']].set_visible(False)
plt.show()

¡Enhorabuena, has acertado!
**************************************************************

09
Añadiendo más elementos visuales

¡Hola! En esta clase, aprendimos cómo mejorar la visualización de datos utilizando técnicas de storytelling con IA. Aquí tienes un resumen de los puntos clave:

Añadir Elementos Visuales Adicionales:

Se exploró cómo enriquecer los gráficos con elementos visuales adicionales, como textos informativos y círculos destacados, para resaltar puntos clave en los datos.
Consistencia en la Biblioteca:

Se enfatizó la importancia de mantener la consistencia en la biblioteca utilizada para la generación de gráficos. Inicialmente, se usaron Matplotlib y Seaborn, pero para ajustes adicionales, se recomendó usar solo Matplotlib para facilitar el trabajo.
Ajustes con Prompts en Chat GPT:

Se utilizó chat gpt para generar código que permita realizar ajustes específicos en los gráficos, como cambiar el formato de las fechas y añadir elementos visuales como círculos en puntos de interés.
Modificación de Ticks y Formato de Eje:

Se ajustaron los ticks en el eje para facilitar la lectura de las dimensiones y se modificó el formato de los meses para mostrar abreviaturas en español.
Añadir Círculos Destacados:

Se dibujaron círculos en puntos específicos del gráfico para resaltar los meses con mayor volumen de ventas, y se plantearon hipótesis sobre las razones detrás de estos picos (ej. Día de las Madres en mayo, Black Friday en noviembre, etc.).
Recomendaciones Finales:

Se recomendó investigar más a fondo el conjunto de datos para extraer conclusiones más detalladas y se sugirió convertir las visualizaciones en funciones para facilitar la exportación de las gráficas.
Espero que este resumen te sea útil. ¿Hay algo más en lo que te pueda ayudar o alguna pregunta específica que tengas sobre la clase?

Copiar texto de Luri al portapapeles
////////////////////////////////////////////////////////////////////////////////
10
Destacando puntos en los gráficos
 Siguiente pregunta

Juan está entrenando cómo refinar los gráficos generados a lo largo de sus estudios de la base con los datos del PIB y valores agregados de la agropecuaria de los estados brasileños para enriquecer su portafolio. Ahora, ha separado los datos solo del Valor Agregado de la Agropecuaria por año en el estado de Bahia. El DataFrame (agro_ba) que generó estos datos es el siguiente:

año	va_agropecuaria
0	2002	6.612125e+09
1	2003	7.611626e+09
2	2004	8.695861e+09
3	2005	7.732466e+09
4	2006	7.958330e+09
5	2007	9.836862e+09
6	2008	1.024886e+10
7	2009	1.060579e+10
8	2010	1.070934e+10
9	2011	1.188632e+10
10	2012	1.277921e+10
11	2013	1.310210e+10
12	2014	1.548399e+10
13	2015	1.785443e+10
14	2016	1.653381e+10
15	2017	1.582685e+10
16	2018	1.909591e+10
17	2019	1.748812e+10
18	2020	2.800694e+10
Juan produjo un gráfico de líneas con los datos mediante un prompt en ChatGPT que podemos observar a continuación:

24.png

Podemos observar, sin embargo, a continuación, solo el primer párrafo del prompt pasado por Juan a ChatGPT para la creación de este visual:

""" Tenemos un DataFrame llamado "agro_ba" y queremos construir un gráfico de líneas que presente los Valores Agregados de la Agropecuaria de Mexico entre 2002 y 2020. Las columnas de "agro_ba" son "ano" con los años de los datos de 2002 a 2020 y "va_agropecuaria" con los valores agregados de la agropecuaria en el estado de Mexico Ajuste los xticks para range(2002,2021, 2) ... """

Partiendo de las ideas del primer párrafo del prompt y el visual descrito anteriormente, ¿cuál de los textos a continuación podría ser el segundo párrafo que João creó para la construcción del gráfico de líneas?

Alternativa incorreta
El título de la figura es "Valores Agregados del sector agropecuario en el estados de Bahia (2002-2020)" con tamaño 16. Las etiquetas de los ejes x e y (yticks y xticks) deben tener tamaño 12, así como las etiquetas de los ejes x e y (xlabel y ylabel). Los bordes del gráfico en la parte superior y el lado derecho deben ser eliminados. Destaca los valores de "va_agropecuaria" en los puntos de los años 2015, 2018 y 2020 con el color "red" y tamaño 100. En la posición x = 2002 y y = 2e10, agrega el siguiente texto con tamaño 10: f"Podemos notar una tendencia de crecimiento en el valor agregado (VA) del sector agropecuario en Bahia, con destaque en los años 2015, 2018 y 2020.". Utiliza las bibliotecas de visualización de datos de Python para crear esta visualización.


Alternativa incorreta
El título de la figura es "Valores Agregados de la Agropecuaria de Bahia (2002-2020)" con tamaño 16. Destaca los valores de "va_agropecuaria" en los puntos de los años 2015, 2018 y 2020 con el color "red" y tamaño 100. En la posición x = 2002 y y = 2e10, agrega el siguiente texto con tamaño 10: f"Podemos notar una tendencia de crecimiento\nen el VA de la Agropecuaria en Bahia, con destaque\nen los años de $\bf{2015}$, $\bf{2018}$ y $\bf{2020}$". Utiliza las bibliotecas de visualización de datos de Python para crear esta visualización.


Alternativa incorreta
El título de la figura es "Valores Agregados del sector agropecuario en el estados de Bahia (2002-2020)" con tamaño 16. Las etiquetas de los ejes x e y (yticks y xticks) deben tener tamaño 12, así como las etiquetas de los ejes x e y (xlabel y ylabel). Los bordes del gráfico en la parte superior y el lado derecho deben ser eliminados. Destaca los valores de "va_agropecuaria" en los puntos de los años 2015, 2018 y 2020 con el color "red" y tamaño 100. En la posición x = 2002 y y = 2e10, agrega el siguiente texto con tamaño 10: f"Podemos notar una tendencia de crecimiento en el valor\nagregado (VA) del sector agropecuario en Bahia, con\ndestaque en los años $\bf{2015}$, $\bf{2018}$ y $\bf{2020}$". Utiliza las bibliotecas de visualización de datos de Python para crear esta visualización.


Este es el prompt ideal, ya que especifica todos los procesos necesarios para lograr el comportamiento deseado, requiriendo la generación de un código para el visual con los refinamientos tanto de los tamaños de los elementos, como etiquetas, textos y destacados.
*************************************************************************************+
11
Desafío: refinando las visualizaciones
 Siguiente pregunta

Zoop ha seleccionado 2 de los visuales creados para formar parte del informe con la narración de datos de la empresa. Se ha definido que se utilizarán los visuales con el facturamiento por región en 2023 y el de personas pre-registradas en Zoop Pay. Refinaremos ambos visuales siguiendo las instrucciones a continuación y la paleta de colores de la e-commerce, alterándolos con la ayuda de ChatGPT:

Desafío 1:

Construye y ejecuta un prompt en ChatGPT para refinar el visual que presenta el facturamiento de las ventas por región. Las instrucciones para el refinamiento son las siguientes:

Fondo de la figura y del área del gráfico en el color GRIS_1
Color de las columnas en AQUA_1 (si deseas destacar solo una, puedes recurrir a AQUA_3, por ejemplo)
Tamaño de la figura de (16,9)
Cambia el título de la figura a un tamaño de 18 y color GRIS_5, ajusta las etiquetas y rótulos del eje x e y, cuando existan, a un tamaño 12 y color AZUL_1
Elimina el máximo de bordes posible y ajusta los datos para que se presenten en las barras en orden de millones, con color AZUL_1 y tamaño 12
Observación 1: Todas las variables que representan los colores en las instrucciones están en una celda en la pestaña Paleta de Colores dentro del notebook Desafíos de la Clase 04.

Observación 2: Es probable que al ejecutar los prompts, ChatGPT sugiera colores para las variables y modificaciones en los códigos que llaman al DataFrame deseado. Presta mucha atención para eliminar la nueva definición de colores y ajustar el DataFrame según lo que has hecho en actividades anteriores.

Desafío 2:

Construye y ejecuta un prompt en ChatGPT para refinar el visual que presenta la proporción de personas pre-registradas en Zoop Pay. Las instrucciones para el refinamiento son las siguientes:

Fondo de la figura y del área del gráfico en el color GRIS_1.
Color de las porciones: AZUL_1 para "Sí" y GRIS_3 para "No".
Tamaño de la figura de (6,6).
Cambia el título de la figura a un tamaño de 18 y color GRIS_5.
Añade etiquetas en las porciones con tamaño 12 y los porcentajes también con tamaño 12 y en negrita. Los porcentajes deben estar en color BLANCO y las etiquetas de las porciones en el mismo color que las porciones.
Ajusta la rosca para que su ancho sea de 0.4 y los porcentajes de las porciones estén en la posición 0.8 en relación al centro.
Evita explosiones de porciones y efectos que dificulten el análisis del gráfico.
Si necesitas ayuda, habrá una opción de solución disponible en la sección "Opinión del instructor/a".

Ver opinión del instructor
Opinión del instructor

Existen diversas maneras de solucionar esta actividad. A continuación presentamos una sugerencia de solución para cada problema.

Es importante destacar que, aunque se utilicen los prompts sugeridos, el resultado puede variar un poco debido a la aleatoriedad de las IAs generativas cuando uses tu cuenta.

Podemos utilizar el siguiente prompt para la resolución del 1º desafío:

Vamos a refinar el gráfico que hicimos de facturación por región. Debe seguir la identidad visual de Zoop, con el fondo de la figura y del gráfico en color GRIS_1, las columnas en color AQUA_1, y el tamaño de la figura debe ser de (16, 9).

El título de la figura será "Facturación por Región en 2023" con tamaño 18 y su color GRIS_5.

Las etiquetas del eje y (yticks) deben ser eliminadas, así como las etiquetas de los ejes x e y (xlabel y ylabel). Las etiquetas del eje X (xticks) deben tener un tamaño de 12 con el color AZUL_1. Retira todas las bordes del gráfico. Muestra el total de cada facturación encima de cada columna en el formato "MXN$ valor M", con el valor dividido por 1 millón (1e6) y con un decimal. El texto debe ser de color AZUL_1 y tamaño 12.

Usa las bibliotecas de visualización de datos de Python para crear esta visualización.

Utilizando la respuesta de ChatGPT, obtenemos el siguiente código:

import matplotlib.pyplot as plt

# Ejemplo de datos agrupados por región y suma de la facturación
# facturacion_por_region = df.groupby('region')['facturacion'].sum().reset_index()

# Ordenación de los datos para una mejor visualización (suponiendo que los datos ya estén preparados)
# facturacion_por_region = facturacion_por_region.sort_values(by='facturacion', ascending=False)

# Configuraciones generales de la figura
plt.figure(figsize=(16, 9), facecolor=GRIS_1)
plt.gca().set_facecolor(GRIS_1)  # Configuración del fondo del gráfico

# Creación del gráfico de columnas
plt.bar(facturacion_por_region['region'], facturacion_por_region['facturacion'] / 1e6, color=AQUA_1)
plt.title('Facturación por Región en 2023', color=GRIS_5, fontsize=18)
plt.yticks([])  # Eliminación de las etiquetas del eje y
plt.ylabel('')  # Eliminación de la etiqueta del eje y
plt.xticks(fontsize=12, color=AZUL_1)
plt.box(False)  # Eliminación de los bordes del gráfico

# Añade el total de la facturación encima de cada columna
for index, value in enumerate(facturacion_por_region['facturacion']):
    plt.text(index, value / 1e6 + 0.1, f'MXN$ {value / 1e6:.1f}M', color=AZUL_1, ha='center', fontsize=12)

# Muestra el gráfico
plt.show()
Copia el código
Salida:

25.png

El gráfico generado muestra que las regiones Centro y Noroeste tienen las mayores facturaciones de Zoop en relación con las otras regiones de México en 2023. Podría ser interesante añadir alguna interpretación de este dato o destacar algún punto para guiar la lectura de la imagen.

Ahora, vamos al 2º desafío, en el que necesitamos mejorar un gráfico que muestra la proporción de personas registradas en Zoop Pay. Podemos utilizar el siguiente prompt para refinar la visualización:

Vamos a refinar el gráfico de rosquilla que producimos para mostrar la proporción de usuarios que realizaron el prerregistro en Zoop Pay.

Nuestro gráfico debe seguir la identidad visual de Zoop, con el fondo de la figura y del gráfico en color GRIS_1, la porción con valor "No" en color GRIS_3 y la porción con valor "Sí" en color AZUL_3. El tamaño de la figura será de (6, 6).

El título de la figura será "¿Prerregistrado(a) en Zoop Pay?" con tamaño 18 y color GRIS_5.

Las etiquetas de las porciones deben tener el mismo color que las porciones y un tamaño de 12. Los porcentajes deben estar en color BLANCO, en negrita, y con un tamaño de 12.

La propiedad del ancho de la rosquilla (wedgeprops) debe ser de 0.4, la posición de los porcentajes dentro de la porción (pctdistance) debe ser de 0.8, el ángulo de inicio debe ser de 180 (startangle) y no debe haber explosión de porciones.

Usa las bibliotecas de visualización de datos de Python para crear esta visualización.

Utilizando la respuesta de ChatGPT, obtenemos el siguiente código:

import matplotlib.pyplot as plt

# Contabiliza la cantidad de usuarios que realizaron el prerregistro en Zoop Pay
pre_registro_counts = df['zoop_pay'].value_counts()

# Define los colores para cada valor
colors = [AZUL_3 if label == 'Sí' else GRIS_3 for label in pre_registro_counts.index]

# Crea el gráfico de rosquilla
plt.figure(figsize=(6, 6), facecolor=GRIS_1)
plt.gca().set_facecolor(GRIS_1)  # Cambia el color del fondo del gráfico
patches, texts, autotexts = plt.pie(pre_registro_counts, labels=pre_registro_counts.index, autopct='%1.1f%%', startangle=180, colors=colors, wedgeprops=dict(width=0.4), pctdistance=0.8)

# Añade el título con el color y tamaño especificados
plt.title('¿Pre-registrado(a) en Zoop Pay?', color=GRIS_5, fontsize=18)

# Configura los colores y tamaños de las etiquetas de las porciones y porcentajes
for text, autotext, color in zip(texts, autotexts, [GRIS_3, AZUL_3]):
    text.set_color(color)  # Define el color de la etiqueta de la porción igual al color de la porción
    text.set_fontsize(12)
    autotext.set_color(BLANCO)  # Define el color de los porcentajes como blanco
    autotext.set_weight('bold')  # Define los porcentajes en negrita
    autotext.set_fontsize(12)
# Muestra el gráfico
plt.show()
Copia el código
Salida:

26.png

Si tienes alguna duda, puedes usar el foro o el Discord de Alura.

******************************************************+
12
Lo que aprendimos
 Siguiente pregunta

Lo que aprendimos en esta aula:

Identificar la importancia de los colores en la visualización de datos.
Reconocer la importancia de la percepción humana en el uso de los colores, accesibilidad, estética visual y el destaque de información en los visuales generados por las IAs generativas.
Escribir prompts para describir cada técnica de narración de datos (storytelling).
Optimizar prompts para generar mejores resultados con la herramienta de ChatGPT.
Con la asistencia de ChatGPT conseguimos:

Personalizar los elementos visuales de un gráfico: título, ejes, rótulos y paleta de colores.
Personalizar los elementos visuales de los gráficos destacándolos a través de colores y uso de textos informativos.
Añadir puntos de interés al gráfico para hacer comparaciones con los datos visualizados.
Refinar los gráficos ya desarrollados a través del código generado por ChatGPT.
********************************************************+
*******************************************************
05.Construyendo el proyecto
01
Proyecto del aula anterior
 Siguiente pregunta

¿Comenzando en esta etapa? Aquí puedes descargar los archivos del proyecto que hemos avanzado hasta el aula anterior.

Descargue los archivos en Github o haga clic aquí para descargarlos directamente.
**************************************************************************+
02
Generando funciones para los gráficos
¡Hola! En esta clase, el enfoque principal es la finalización del proyecto mediante la optimización y organización del código para la generación de gráficos. Aquí tienes un resumen de los puntos clave:

Creación de Funciones para Gráficos:

Se encapsulan los códigos de los gráficos en funciones (metodo_pago, ventas_mensuales, facturacion_por_categoria) para facilitar la exportación y reutilización.
Se utiliza return plt en cada función para devolver el objeto gráfico y permitir su visualización con .show().
Mejora de Gráficos con Instrucciones Detalladas:

Se utiliza un prompt detallado para modificar el gráfico de facturación por categoría de producto, incluyendo especificaciones de identidad visual, colores, etiquetas y texto explicativo.
Se destaca la importancia de proporcionar el código original del gráfico al modelo para obtener resultados más precisos y consistentes.
Automatización y Aprendizaje del Modelo:

Se observa que, con la secuencia de instrucciones, el modelo aprende patrones y genera código de manera más autónoma, lo que facilita la creación de visualizaciones complejas.
¿Hay algo en particular sobre lo que te gustaría profundizar o tienes alguna pregunta adicional?

Copiar texto de Luri al portapapeles
***************************************************************
03 Buenas prácticas para el refinamiento de visualizaciones